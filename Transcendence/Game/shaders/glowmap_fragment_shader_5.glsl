#version 330 core
out vec4 FragColor;
  
in vec3 ourColor;
in vec2 TexCoord;

uniform sampler2D ourTexture;
uniform vec2 quadSize;

float getGlowBoundaries_5(float epsilon, vec2 texture_uv, sampler2D obj_texture, vec2 texture_size)
{
vec2 onePixel = vec2(1.0, 1.0) / texture_size;
vec2 quadSize_float = quadSize / texture_size;
vec2 quad_index = vec2(float(int(texture_uv[0] / quadSize_float[0])), float(int(texture_uv[1] / quadSize_float[1])));

vec2 offset0 = vec2(onePixel[0] * -5.0, onePixel[1] * 0.0);
vec2 texCoords0 =  vec2(texture_uv[0], texture_uv[1]) + offset0;
float texAlpha0 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset0)[3]);
bool texInBounds0 = (abs(int(texCoords0[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords0[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords0[0] > 0.0f && texCoords0[0] < 1.0f && texCoords0[1] > 0.0f && texCoords0[1] < 1.0f;
float sample0 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset0)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset0)[3] > epsilon)) * 0.015413f * float(texInBounds0);
vec2 offset1 = vec2(onePixel[0] * -4.0, onePixel[1] * -1.0);
vec2 texCoords1 =  vec2(texture_uv[0], texture_uv[1]) + offset1;
float texAlpha1 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset1)[3]);
bool texInBounds1 = (abs(int(texCoords1[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords1[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords1[0] > 0.0f && texCoords1[0] < 1.0f && texCoords1[1] > 0.0f && texCoords1[1] < 1.0f;
float sample1 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset1)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset1)[3] > epsilon)) * 0.015931f * float(texInBounds1);
vec2 offset2 = vec2(onePixel[0] * -4.0, onePixel[1] * 0.0);
vec2 texCoords2 =  vec2(texture_uv[0], texture_uv[1]) + offset2;
float texAlpha2 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset2)[3]);
bool texInBounds2 = (abs(int(texCoords2[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords2[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords2[0] > 0.0f && texCoords2[0] < 1.0f && texCoords2[1] > 0.0f && texCoords2[1] < 1.0f;
float sample2 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset2)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset2)[3] > epsilon)) * 0.015997f * float(texInBounds2);
vec2 offset3 = vec2(onePixel[0] * -4.0, onePixel[1] * 1.0);
vec2 texCoords3 =  vec2(texture_uv[0], texture_uv[1]) + offset3;
float texAlpha3 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset3)[3]);
bool texInBounds3 = (abs(int(texCoords3[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords3[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords3[0] > 0.0f && texCoords3[0] < 1.0f && texCoords3[1] > 0.0f && texCoords3[1] < 1.0f;
float sample3 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset3)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset3)[3] > epsilon)) * 0.015931f * float(texInBounds3);
vec2 offset4 = vec2(onePixel[0] * -3.0, onePixel[1] * -2.0);
vec2 texCoords4 =  vec2(texture_uv[0], texture_uv[1]) + offset4;
float texAlpha4 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset4)[3]);
bool texInBounds4 = (abs(int(texCoords4[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords4[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords4[0] > 0.0f && texCoords4[0] < 1.0f && texCoords4[1] > 0.0f && texCoords4[1] < 1.0f;
float sample4 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset4)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset4)[3] > epsilon)) * 0.016197f * float(texInBounds4);
vec2 offset5 = vec2(onePixel[0] * -3.0, onePixel[1] * -1.0);
vec2 texCoords5 =  vec2(texture_uv[0], texture_uv[1]) + offset5;
float texAlpha5 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset5)[3]);
bool texInBounds5 = (abs(int(texCoords5[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords5[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords5[0] > 0.0f && texCoords5[0] < 1.0f && texCoords5[1] > 0.0f && texCoords5[1] < 1.0f;
float sample5 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset5)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset5)[3] > epsilon)) * 0.016399f * float(texInBounds5);
vec2 offset6 = vec2(onePixel[0] * -3.0, onePixel[1] * 0.0);
vec2 texCoords6 =  vec2(texture_uv[0], texture_uv[1]) + offset6;
float texAlpha6 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset6)[3]);
bool texInBounds6 = (abs(int(texCoords6[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords6[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords6[0] > 0.0f && texCoords6[0] < 1.0f && texCoords6[1] > 0.0f && texCoords6[1] < 1.0f;
float sample6 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset6)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset6)[3] > epsilon)) * 0.016467f * float(texInBounds6);
vec2 offset7 = vec2(onePixel[0] * -3.0, onePixel[1] * 1.0);
vec2 texCoords7 =  vec2(texture_uv[0], texture_uv[1]) + offset7;
float texAlpha7 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset7)[3]);
bool texInBounds7 = (abs(int(texCoords7[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords7[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords7[0] > 0.0f && texCoords7[0] < 1.0f && texCoords7[1] > 0.0f && texCoords7[1] < 1.0f;
float sample7 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset7)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset7)[3] > epsilon)) * 0.016399f * float(texInBounds7);
vec2 offset8 = vec2(onePixel[0] * -3.0, onePixel[1] * 2.0);
vec2 texCoords8 =  vec2(texture_uv[0], texture_uv[1]) + offset8;
float texAlpha8 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset8)[3]);
bool texInBounds8 = (abs(int(texCoords8[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords8[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords8[0] > 0.0f && texCoords8[0] < 1.0f && texCoords8[1] > 0.0f && texCoords8[1] < 1.0f;
float sample8 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset8)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset8)[3] > epsilon)) * 0.016197f * float(texInBounds8);
vec2 offset9 = vec2(onePixel[0] * -2.0, onePixel[1] * -3.0);
vec2 texCoords9 =  vec2(texture_uv[0], texture_uv[1]) + offset9;
float texAlpha9 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset9)[3]);
bool texInBounds9 = (abs(int(texCoords9[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords9[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords9[0] > 0.0f && texCoords9[0] < 1.0f && texCoords9[1] > 0.0f && texCoords9[1] < 1.0f;
float sample9 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset9)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset9)[3] > epsilon)) * 0.016197f * float(texInBounds9);
vec2 offset10 = vec2(onePixel[0] * -2.0, onePixel[1] * -2.0);
vec2 texCoords10 =  vec2(texture_uv[0], texture_uv[1]) + offset10;
float texAlpha10 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset10)[3]);
bool texInBounds10 = (abs(int(texCoords10[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords10[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords10[0] > 0.0f && texCoords10[0] < 1.0f && texCoords10[1] > 0.0f && texCoords10[1] < 1.0f;
float sample10 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset10)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset10)[3] > epsilon)) * 0.016535f * float(texInBounds10);
vec2 offset11 = vec2(onePixel[0] * -2.0, onePixel[1] * -1.0);
vec2 texCoords11 =  vec2(texture_uv[0], texture_uv[1]) + offset11;
float texAlpha11 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset11)[3]);
bool texInBounds11 = (abs(int(texCoords11[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords11[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords11[0] > 0.0f && texCoords11[0] < 1.0f && texCoords11[1] > 0.0f && texCoords11[1] < 1.0f;
float sample11 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset11)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset11)[3] > epsilon)) * 0.016741f * float(texInBounds11);
vec2 offset12 = vec2(onePixel[0] * -2.0, onePixel[1] * 0.0);
vec2 texCoords12 =  vec2(texture_uv[0], texture_uv[1]) + offset12;
float texAlpha12 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset12)[3]);
bool texInBounds12 = (abs(int(texCoords12[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords12[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords12[0] > 0.0f && texCoords12[0] < 1.0f && texCoords12[1] > 0.0f && texCoords12[1] < 1.0f;
float sample12 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset12)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset12)[3] > epsilon)) * 0.016810f * float(texInBounds12);
vec2 offset13 = vec2(onePixel[0] * -2.0, onePixel[1] * 1.0);
vec2 texCoords13 =  vec2(texture_uv[0], texture_uv[1]) + offset13;
float texAlpha13 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset13)[3]);
bool texInBounds13 = (abs(int(texCoords13[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords13[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords13[0] > 0.0f && texCoords13[0] < 1.0f && texCoords13[1] > 0.0f && texCoords13[1] < 1.0f;
float sample13 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset13)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset13)[3] > epsilon)) * 0.016741f * float(texInBounds13);
vec2 offset14 = vec2(onePixel[0] * -2.0, onePixel[1] * 2.0);
vec2 texCoords14 =  vec2(texture_uv[0], texture_uv[1]) + offset14;
float texAlpha14 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset14)[3]);
bool texInBounds14 = (abs(int(texCoords14[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords14[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords14[0] > 0.0f && texCoords14[0] < 1.0f && texCoords14[1] > 0.0f && texCoords14[1] < 1.0f;
float sample14 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset14)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset14)[3] > epsilon)) * 0.016535f * float(texInBounds14);
vec2 offset15 = vec2(onePixel[0] * -2.0, onePixel[1] * 3.0);
vec2 texCoords15 =  vec2(texture_uv[0], texture_uv[1]) + offset15;
float texAlpha15 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset15)[3]);
bool texInBounds15 = (abs(int(texCoords15[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords15[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords15[0] > 0.0f && texCoords15[0] < 1.0f && texCoords15[1] > 0.0f && texCoords15[1] < 1.0f;
float sample15 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset15)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset15)[3] > epsilon)) * 0.016197f * float(texInBounds15);
vec2 offset16 = vec2(onePixel[0] * -1.0, onePixel[1] * -4.0);
vec2 texCoords16 =  vec2(texture_uv[0], texture_uv[1]) + offset16;
float texAlpha16 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset16)[3]);
bool texInBounds16 = (abs(int(texCoords16[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords16[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords16[0] > 0.0f && texCoords16[0] < 1.0f && texCoords16[1] > 0.0f && texCoords16[1] < 1.0f;
float sample16 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset16)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset16)[3] > epsilon)) * 0.015931f * float(texInBounds16);
vec2 offset17 = vec2(onePixel[0] * -1.0, onePixel[1] * -3.0);
vec2 texCoords17 =  vec2(texture_uv[0], texture_uv[1]) + offset17;
float texAlpha17 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset17)[3]);
bool texInBounds17 = (abs(int(texCoords17[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords17[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords17[0] > 0.0f && texCoords17[0] < 1.0f && texCoords17[1] > 0.0f && texCoords17[1] < 1.0f;
float sample17 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset17)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset17)[3] > epsilon)) * 0.016399f * float(texInBounds17);
vec2 offset18 = vec2(onePixel[0] * -1.0, onePixel[1] * -2.0);
vec2 texCoords18 =  vec2(texture_uv[0], texture_uv[1]) + offset18;
float texAlpha18 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset18)[3]);
bool texInBounds18 = (abs(int(texCoords18[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords18[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords18[0] > 0.0f && texCoords18[0] < 1.0f && texCoords18[1] > 0.0f && texCoords18[1] < 1.0f;
float sample18 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset18)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset18)[3] > epsilon)) * 0.016741f * float(texInBounds18);
vec2 offset19 = vec2(onePixel[0] * -1.0, onePixel[1] * -1.0);
vec2 texCoords19 =  vec2(texture_uv[0], texture_uv[1]) + offset19;
float texAlpha19 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset19)[3]);
bool texInBounds19 = (abs(int(texCoords19[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords19[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords19[0] > 0.0f && texCoords19[0] < 1.0f && texCoords19[1] > 0.0f && texCoords19[1] < 1.0f;
float sample19 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset19)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset19)[3] > epsilon)) * 0.016950f * float(texInBounds19);
vec2 offset20 = vec2(onePixel[0] * -1.0, onePixel[1] * 0.0);
vec2 texCoords20 =  vec2(texture_uv[0], texture_uv[1]) + offset20;
float texAlpha20 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset20)[3]);
bool texInBounds20 = (abs(int(texCoords20[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords20[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords20[0] > 0.0f && texCoords20[0] < 1.0f && texCoords20[1] > 0.0f && texCoords20[1] < 1.0f;
float sample20 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset20)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset20)[3] > epsilon)) * 0.017020f * float(texInBounds20);
vec2 offset21 = vec2(onePixel[0] * -1.0, onePixel[1] * 1.0);
vec2 texCoords21 =  vec2(texture_uv[0], texture_uv[1]) + offset21;
float texAlpha21 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset21)[3]);
bool texInBounds21 = (abs(int(texCoords21[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords21[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords21[0] > 0.0f && texCoords21[0] < 1.0f && texCoords21[1] > 0.0f && texCoords21[1] < 1.0f;
float sample21 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset21)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset21)[3] > epsilon)) * 0.016950f * float(texInBounds21);
vec2 offset22 = vec2(onePixel[0] * -1.0, onePixel[1] * 2.0);
vec2 texCoords22 =  vec2(texture_uv[0], texture_uv[1]) + offset22;
float texAlpha22 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset22)[3]);
bool texInBounds22 = (abs(int(texCoords22[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords22[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords22[0] > 0.0f && texCoords22[0] < 1.0f && texCoords22[1] > 0.0f && texCoords22[1] < 1.0f;
float sample22 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset22)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset22)[3] > epsilon)) * 0.016741f * float(texInBounds22);
vec2 offset23 = vec2(onePixel[0] * -1.0, onePixel[1] * 3.0);
vec2 texCoords23 =  vec2(texture_uv[0], texture_uv[1]) + offset23;
float texAlpha23 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset23)[3]);
bool texInBounds23 = (abs(int(texCoords23[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords23[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords23[0] > 0.0f && texCoords23[0] < 1.0f && texCoords23[1] > 0.0f && texCoords23[1] < 1.0f;
float sample23 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset23)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset23)[3] > epsilon)) * 0.016399f * float(texInBounds23);
vec2 offset24 = vec2(onePixel[0] * -1.0, onePixel[1] * 4.0);
vec2 texCoords24 =  vec2(texture_uv[0], texture_uv[1]) + offset24;
float texAlpha24 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset24)[3]);
bool texInBounds24 = (abs(int(texCoords24[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords24[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords24[0] > 0.0f && texCoords24[0] < 1.0f && texCoords24[1] > 0.0f && texCoords24[1] < 1.0f;
float sample24 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset24)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset24)[3] > epsilon)) * 0.015931f * float(texInBounds24);
vec2 offset25 = vec2(onePixel[0] * 0.0, onePixel[1] * -5.0);
vec2 texCoords25 =  vec2(texture_uv[0], texture_uv[1]) + offset25;
float texAlpha25 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset25)[3]);
bool texInBounds25 = (abs(int(texCoords25[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords25[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords25[0] > 0.0f && texCoords25[0] < 1.0f && texCoords25[1] > 0.0f && texCoords25[1] < 1.0f;
float sample25 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset25)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset25)[3] > epsilon)) * 0.015413f * float(texInBounds25);
vec2 offset26 = vec2(onePixel[0] * 0.0, onePixel[1] * -4.0);
vec2 texCoords26 =  vec2(texture_uv[0], texture_uv[1]) + offset26;
float texAlpha26 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset26)[3]);
bool texInBounds26 = (abs(int(texCoords26[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords26[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords26[0] > 0.0f && texCoords26[0] < 1.0f && texCoords26[1] > 0.0f && texCoords26[1] < 1.0f;
float sample26 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset26)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset26)[3] > epsilon)) * 0.015997f * float(texInBounds26);
vec2 offset27 = vec2(onePixel[0] * 0.0, onePixel[1] * -3.0);
vec2 texCoords27 =  vec2(texture_uv[0], texture_uv[1]) + offset27;
float texAlpha27 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset27)[3]);
bool texInBounds27 = (abs(int(texCoords27[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords27[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords27[0] > 0.0f && texCoords27[0] < 1.0f && texCoords27[1] > 0.0f && texCoords27[1] < 1.0f;
float sample27 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset27)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset27)[3] > epsilon)) * 0.016467f * float(texInBounds27);
vec2 offset28 = vec2(onePixel[0] * 0.0, onePixel[1] * -2.0);
vec2 texCoords28 =  vec2(texture_uv[0], texture_uv[1]) + offset28;
float texAlpha28 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset28)[3]);
bool texInBounds28 = (abs(int(texCoords28[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords28[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords28[0] > 0.0f && texCoords28[0] < 1.0f && texCoords28[1] > 0.0f && texCoords28[1] < 1.0f;
float sample28 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset28)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset28)[3] > epsilon)) * 0.016810f * float(texInBounds28);
vec2 offset29 = vec2(onePixel[0] * 0.0, onePixel[1] * -1.0);
vec2 texCoords29 =  vec2(texture_uv[0], texture_uv[1]) + offset29;
float texAlpha29 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset29)[3]);
bool texInBounds29 = (abs(int(texCoords29[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords29[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords29[0] > 0.0f && texCoords29[0] < 1.0f && texCoords29[1] > 0.0f && texCoords29[1] < 1.0f;
float sample29 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset29)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset29)[3] > epsilon)) * 0.017020f * float(texInBounds29);
vec2 offset30 = vec2(onePixel[0] * 0.0, onePixel[1] * 0.0);
vec2 texCoords30 =  vec2(texture_uv[0], texture_uv[1]) + offset30;
float texAlpha30 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset30)[3]);
bool texInBounds30 = (abs(int(texCoords30[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords30[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords30[0] > 0.0f && texCoords30[0] < 1.0f && texCoords30[1] > 0.0f && texCoords30[1] < 1.0f;
float sample30 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset30)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset30)[3] > epsilon)) * 0.017091f * float(texInBounds30);
vec2 offset31 = vec2(onePixel[0] * 0.0, onePixel[1] * 1.0);
vec2 texCoords31 =  vec2(texture_uv[0], texture_uv[1]) + offset31;
float texAlpha31 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset31)[3]);
bool texInBounds31 = (abs(int(texCoords31[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords31[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords31[0] > 0.0f && texCoords31[0] < 1.0f && texCoords31[1] > 0.0f && texCoords31[1] < 1.0f;
float sample31 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset31)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset31)[3] > epsilon)) * 0.017020f * float(texInBounds31);
vec2 offset32 = vec2(onePixel[0] * 0.0, onePixel[1] * 2.0);
vec2 texCoords32 =  vec2(texture_uv[0], texture_uv[1]) + offset32;
float texAlpha32 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset32)[3]);
bool texInBounds32 = (abs(int(texCoords32[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords32[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords32[0] > 0.0f && texCoords32[0] < 1.0f && texCoords32[1] > 0.0f && texCoords32[1] < 1.0f;
float sample32 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset32)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset32)[3] > epsilon)) * 0.016810f * float(texInBounds32);
vec2 offset33 = vec2(onePixel[0] * 0.0, onePixel[1] * 3.0);
vec2 texCoords33 =  vec2(texture_uv[0], texture_uv[1]) + offset33;
float texAlpha33 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset33)[3]);
bool texInBounds33 = (abs(int(texCoords33[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords33[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords33[0] > 0.0f && texCoords33[0] < 1.0f && texCoords33[1] > 0.0f && texCoords33[1] < 1.0f;
float sample33 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset33)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset33)[3] > epsilon)) * 0.016467f * float(texInBounds33);
vec2 offset34 = vec2(onePixel[0] * 0.0, onePixel[1] * 4.0);
vec2 texCoords34 =  vec2(texture_uv[0], texture_uv[1]) + offset34;
float texAlpha34 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset34)[3]);
bool texInBounds34 = (abs(int(texCoords34[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords34[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords34[0] > 0.0f && texCoords34[0] < 1.0f && texCoords34[1] > 0.0f && texCoords34[1] < 1.0f;
float sample34 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset34)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset34)[3] > epsilon)) * 0.015997f * float(texInBounds34);
vec2 offset35 = vec2(onePixel[0] * 0.0, onePixel[1] * 5.0);
vec2 texCoords35 =  vec2(texture_uv[0], texture_uv[1]) + offset35;
float texAlpha35 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset35)[3]);
bool texInBounds35 = (abs(int(texCoords35[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords35[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords35[0] > 0.0f && texCoords35[0] < 1.0f && texCoords35[1] > 0.0f && texCoords35[1] < 1.0f;
float sample35 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset35)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset35)[3] > epsilon)) * 0.015413f * float(texInBounds35);
vec2 offset36 = vec2(onePixel[0] * 1.0, onePixel[1] * -4.0);
vec2 texCoords36 =  vec2(texture_uv[0], texture_uv[1]) + offset36;
float texAlpha36 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset36)[3]);
bool texInBounds36 = (abs(int(texCoords36[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords36[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords36[0] > 0.0f && texCoords36[0] < 1.0f && texCoords36[1] > 0.0f && texCoords36[1] < 1.0f;
float sample36 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset36)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset36)[3] > epsilon)) * 0.015931f * float(texInBounds36);
vec2 offset37 = vec2(onePixel[0] * 1.0, onePixel[1] * -3.0);
vec2 texCoords37 =  vec2(texture_uv[0], texture_uv[1]) + offset37;
float texAlpha37 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset37)[3]);
bool texInBounds37 = (abs(int(texCoords37[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords37[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords37[0] > 0.0f && texCoords37[0] < 1.0f && texCoords37[1] > 0.0f && texCoords37[1] < 1.0f;
float sample37 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset37)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset37)[3] > epsilon)) * 0.016399f * float(texInBounds37);
vec2 offset38 = vec2(onePixel[0] * 1.0, onePixel[1] * -2.0);
vec2 texCoords38 =  vec2(texture_uv[0], texture_uv[1]) + offset38;
float texAlpha38 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset38)[3]);
bool texInBounds38 = (abs(int(texCoords38[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords38[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords38[0] > 0.0f && texCoords38[0] < 1.0f && texCoords38[1] > 0.0f && texCoords38[1] < 1.0f;
float sample38 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset38)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset38)[3] > epsilon)) * 0.016741f * float(texInBounds38);
vec2 offset39 = vec2(onePixel[0] * 1.0, onePixel[1] * -1.0);
vec2 texCoords39 =  vec2(texture_uv[0], texture_uv[1]) + offset39;
float texAlpha39 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset39)[3]);
bool texInBounds39 = (abs(int(texCoords39[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords39[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords39[0] > 0.0f && texCoords39[0] < 1.0f && texCoords39[1] > 0.0f && texCoords39[1] < 1.0f;
float sample39 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset39)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset39)[3] > epsilon)) * 0.016950f * float(texInBounds39);
vec2 offset40 = vec2(onePixel[0] * 1.0, onePixel[1] * 0.0);
vec2 texCoords40 =  vec2(texture_uv[0], texture_uv[1]) + offset40;
float texAlpha40 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset40)[3]);
bool texInBounds40 = (abs(int(texCoords40[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords40[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords40[0] > 0.0f && texCoords40[0] < 1.0f && texCoords40[1] > 0.0f && texCoords40[1] < 1.0f;
float sample40 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset40)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset40)[3] > epsilon)) * 0.017020f * float(texInBounds40);
vec2 offset41 = vec2(onePixel[0] * 1.0, onePixel[1] * 1.0);
vec2 texCoords41 =  vec2(texture_uv[0], texture_uv[1]) + offset41;
float texAlpha41 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset41)[3]);
bool texInBounds41 = (abs(int(texCoords41[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords41[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords41[0] > 0.0f && texCoords41[0] < 1.0f && texCoords41[1] > 0.0f && texCoords41[1] < 1.0f;
float sample41 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset41)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset41)[3] > epsilon)) * 0.016950f * float(texInBounds41);
vec2 offset42 = vec2(onePixel[0] * 1.0, onePixel[1] * 2.0);
vec2 texCoords42 =  vec2(texture_uv[0], texture_uv[1]) + offset42;
float texAlpha42 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset42)[3]);
bool texInBounds42 = (abs(int(texCoords42[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords42[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords42[0] > 0.0f && texCoords42[0] < 1.0f && texCoords42[1] > 0.0f && texCoords42[1] < 1.0f;
float sample42 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset42)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset42)[3] > epsilon)) * 0.016741f * float(texInBounds42);
vec2 offset43 = vec2(onePixel[0] * 1.0, onePixel[1] * 3.0);
vec2 texCoords43 =  vec2(texture_uv[0], texture_uv[1]) + offset43;
float texAlpha43 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset43)[3]);
bool texInBounds43 = (abs(int(texCoords43[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords43[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords43[0] > 0.0f && texCoords43[0] < 1.0f && texCoords43[1] > 0.0f && texCoords43[1] < 1.0f;
float sample43 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset43)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset43)[3] > epsilon)) * 0.016399f * float(texInBounds43);
vec2 offset44 = vec2(onePixel[0] * 1.0, onePixel[1] * 4.0);
vec2 texCoords44 =  vec2(texture_uv[0], texture_uv[1]) + offset44;
float texAlpha44 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset44)[3]);
bool texInBounds44 = (abs(int(texCoords44[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords44[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords44[0] > 0.0f && texCoords44[0] < 1.0f && texCoords44[1] > 0.0f && texCoords44[1] < 1.0f;
float sample44 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset44)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset44)[3] > epsilon)) * 0.015931f * float(texInBounds44);
vec2 offset45 = vec2(onePixel[0] * 2.0, onePixel[1] * -3.0);
vec2 texCoords45 =  vec2(texture_uv[0], texture_uv[1]) + offset45;
float texAlpha45 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset45)[3]);
bool texInBounds45 = (abs(int(texCoords45[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords45[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords45[0] > 0.0f && texCoords45[0] < 1.0f && texCoords45[1] > 0.0f && texCoords45[1] < 1.0f;
float sample45 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset45)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset45)[3] > epsilon)) * 0.016197f * float(texInBounds45);
vec2 offset46 = vec2(onePixel[0] * 2.0, onePixel[1] * -2.0);
vec2 texCoords46 =  vec2(texture_uv[0], texture_uv[1]) + offset46;
float texAlpha46 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset46)[3]);
bool texInBounds46 = (abs(int(texCoords46[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords46[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords46[0] > 0.0f && texCoords46[0] < 1.0f && texCoords46[1] > 0.0f && texCoords46[1] < 1.0f;
float sample46 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset46)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset46)[3] > epsilon)) * 0.016535f * float(texInBounds46);
vec2 offset47 = vec2(onePixel[0] * 2.0, onePixel[1] * -1.0);
vec2 texCoords47 =  vec2(texture_uv[0], texture_uv[1]) + offset47;
float texAlpha47 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset47)[3]);
bool texInBounds47 = (abs(int(texCoords47[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords47[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords47[0] > 0.0f && texCoords47[0] < 1.0f && texCoords47[1] > 0.0f && texCoords47[1] < 1.0f;
float sample47 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset47)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset47)[3] > epsilon)) * 0.016741f * float(texInBounds47);
vec2 offset48 = vec2(onePixel[0] * 2.0, onePixel[1] * 0.0);
vec2 texCoords48 =  vec2(texture_uv[0], texture_uv[1]) + offset48;
float texAlpha48 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset48)[3]);
bool texInBounds48 = (abs(int(texCoords48[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords48[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords48[0] > 0.0f && texCoords48[0] < 1.0f && texCoords48[1] > 0.0f && texCoords48[1] < 1.0f;
float sample48 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset48)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset48)[3] > epsilon)) * 0.016810f * float(texInBounds48);
vec2 offset49 = vec2(onePixel[0] * 2.0, onePixel[1] * 1.0);
vec2 texCoords49 =  vec2(texture_uv[0], texture_uv[1]) + offset49;
float texAlpha49 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset49)[3]);
bool texInBounds49 = (abs(int(texCoords49[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords49[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords49[0] > 0.0f && texCoords49[0] < 1.0f && texCoords49[1] > 0.0f && texCoords49[1] < 1.0f;
float sample49 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset49)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset49)[3] > epsilon)) * 0.016741f * float(texInBounds49);
vec2 offset50 = vec2(onePixel[0] * 2.0, onePixel[1] * 2.0);
vec2 texCoords50 =  vec2(texture_uv[0], texture_uv[1]) + offset50;
float texAlpha50 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset50)[3]);
bool texInBounds50 = (abs(int(texCoords50[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords50[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords50[0] > 0.0f && texCoords50[0] < 1.0f && texCoords50[1] > 0.0f && texCoords50[1] < 1.0f;
float sample50 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset50)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset50)[3] > epsilon)) * 0.016535f * float(texInBounds50);
vec2 offset51 = vec2(onePixel[0] * 2.0, onePixel[1] * 3.0);
vec2 texCoords51 =  vec2(texture_uv[0], texture_uv[1]) + offset51;
float texAlpha51 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset51)[3]);
bool texInBounds51 = (abs(int(texCoords51[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords51[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords51[0] > 0.0f && texCoords51[0] < 1.0f && texCoords51[1] > 0.0f && texCoords51[1] < 1.0f;
float sample51 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset51)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset51)[3] > epsilon)) * 0.016197f * float(texInBounds51);
vec2 offset52 = vec2(onePixel[0] * 3.0, onePixel[1] * -2.0);
vec2 texCoords52 =  vec2(texture_uv[0], texture_uv[1]) + offset52;
float texAlpha52 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset52)[3]);
bool texInBounds52 = (abs(int(texCoords52[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords52[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords52[0] > 0.0f && texCoords52[0] < 1.0f && texCoords52[1] > 0.0f && texCoords52[1] < 1.0f;
float sample52 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset52)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset52)[3] > epsilon)) * 0.016197f * float(texInBounds52);
vec2 offset53 = vec2(onePixel[0] * 3.0, onePixel[1] * -1.0);
vec2 texCoords53 =  vec2(texture_uv[0], texture_uv[1]) + offset53;
float texAlpha53 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset53)[3]);
bool texInBounds53 = (abs(int(texCoords53[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords53[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords53[0] > 0.0f && texCoords53[0] < 1.0f && texCoords53[1] > 0.0f && texCoords53[1] < 1.0f;
float sample53 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset53)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset53)[3] > epsilon)) * 0.016399f * float(texInBounds53);
vec2 offset54 = vec2(onePixel[0] * 3.0, onePixel[1] * 0.0);
vec2 texCoords54 =  vec2(texture_uv[0], texture_uv[1]) + offset54;
float texAlpha54 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset54)[3]);
bool texInBounds54 = (abs(int(texCoords54[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords54[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords54[0] > 0.0f && texCoords54[0] < 1.0f && texCoords54[1] > 0.0f && texCoords54[1] < 1.0f;
float sample54 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset54)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset54)[3] > epsilon)) * 0.016467f * float(texInBounds54);
vec2 offset55 = vec2(onePixel[0] * 3.0, onePixel[1] * 1.0);
vec2 texCoords55 =  vec2(texture_uv[0], texture_uv[1]) + offset55;
float texAlpha55 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset55)[3]);
bool texInBounds55 = (abs(int(texCoords55[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords55[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords55[0] > 0.0f && texCoords55[0] < 1.0f && texCoords55[1] > 0.0f && texCoords55[1] < 1.0f;
float sample55 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset55)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset55)[3] > epsilon)) * 0.016399f * float(texInBounds55);
vec2 offset56 = vec2(onePixel[0] * 3.0, onePixel[1] * 2.0);
vec2 texCoords56 =  vec2(texture_uv[0], texture_uv[1]) + offset56;
float texAlpha56 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset56)[3]);
bool texInBounds56 = (abs(int(texCoords56[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords56[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords56[0] > 0.0f && texCoords56[0] < 1.0f && texCoords56[1] > 0.0f && texCoords56[1] < 1.0f;
float sample56 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset56)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset56)[3] > epsilon)) * 0.016197f * float(texInBounds56);
vec2 offset57 = vec2(onePixel[0] * 4.0, onePixel[1] * -1.0);
vec2 texCoords57 =  vec2(texture_uv[0], texture_uv[1]) + offset57;
float texAlpha57 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset57)[3]);
bool texInBounds57 = (abs(int(texCoords57[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords57[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords57[0] > 0.0f && texCoords57[0] < 1.0f && texCoords57[1] > 0.0f && texCoords57[1] < 1.0f;
float sample57 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset57)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset57)[3] > epsilon)) * 0.015931f * float(texInBounds57);
vec2 offset58 = vec2(onePixel[0] * 4.0, onePixel[1] * 0.0);
vec2 texCoords58 =  vec2(texture_uv[0], texture_uv[1]) + offset58;
float texAlpha58 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset58)[3]);
bool texInBounds58 = (abs(int(texCoords58[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords58[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords58[0] > 0.0f && texCoords58[0] < 1.0f && texCoords58[1] > 0.0f && texCoords58[1] < 1.0f;
float sample58 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset58)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset58)[3] > epsilon)) * 0.015997f * float(texInBounds58);
vec2 offset59 = vec2(onePixel[0] * 4.0, onePixel[1] * 1.0);
vec2 texCoords59 =  vec2(texture_uv[0], texture_uv[1]) + offset59;
float texAlpha59 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset59)[3]);
bool texInBounds59 = (abs(int(texCoords59[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords59[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords59[0] > 0.0f && texCoords59[0] < 1.0f && texCoords59[1] > 0.0f && texCoords59[1] < 1.0f;
float sample59 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset59)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset59)[3] > epsilon)) * 0.015931f * float(texInBounds59);
vec2 offset60 = vec2(onePixel[0] * 5.0, onePixel[1] * 0.0);
vec2 texCoords60 =  vec2(texture_uv[0], texture_uv[1]) + offset60;
float texAlpha60 = float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset60)[3]);
bool texInBounds60 = (abs(int(texCoords60[0] / quadSize_float[0]) - quad_index[0]) < epsilon) && (abs(int(texCoords60[1] / quadSize_float[1]) - quad_index[1]) < epsilon) && texCoords60[0] > 0.0f && texCoords60[0] < 1.0f && texCoords60[1] > 0.0f && texCoords60[1] < 1.0f;
float sample60 = min(1.0, fwidth(float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset60)[3])) + float(texture(obj_texture, vec2(texture_uv[0], texture_uv[1]) + offset60)[3] > epsilon)) * 0.015413f * float(texInBounds60);
float glowBoundaries = sample0 + sample1 + sample2 + sample3 + sample4 + sample5 + sample6 + sample7 + sample8 + sample9 + sample10 + sample11 + sample12 + sample13 + sample14 + sample15 + sample16 + sample17 + sample18 + sample19 + sample20 + sample21 + sample22 + sample23 + sample24 + sample25 + sample26 + sample27 + sample28 + sample29 + sample30 + sample31 + sample32 + sample33 + sample34 + sample35 + sample36 + sample37 + sample38 + sample39 + sample40 + sample41 + sample42 + sample43 + sample44 + sample45 + sample46 + sample47 + sample48 + sample49 + sample50 + sample51 + sample52 + sample53 + sample54 + sample55 + sample56 + sample57 + sample58 + sample59 + sample60;

return min(1.0, 2.0 * glowBoundaries);
}

void main()
{
	float epsilon = 0.0001;
	vec2 texture_size = textureSize(ourTexture, 0);
	float glowValue_5 = getGlowBoundaries_5(epsilon, TexCoord, ourTexture, texture_size);
	float glowValue = glowValue_5;
	FragColor = vec4(glowValue, glowValue, glowValue, glowValue);
}