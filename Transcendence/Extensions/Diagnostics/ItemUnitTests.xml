<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

	<Type unid="&unidItemUnitTests;">
		<Events>
			<OnGlobalStartDiagnostics>
				(block (
					(testItem (itmCreate &itLaserCannon; 1))
					)
					;	Unit Tests for Functions

					(diagEval (list
						{	test:'(setq testItem1 (itmCreate &itLaserCannon; 1))			result:'ignore	}
						{	test:'(itmGetType testItem1)									result:&itLaserCannon;	}
						{	test:'(setq testItem2 (itmCreate &itLaserCannon; 1))			result:'ignore	}

						;	itmIsEqual -----------------------------------------

						{	test:'(itmIsEqual testItem1 testItem2)							result:True	}
						{	test:'(itmIsEqual testItem1
									(itmCreate &itLaserCannon; 10)
									)														result:True	}
						{	test:'(itmIsEqual testItem1
									(itmCreate &itBallistaCannon; 1)
									)														result:Nil	}
						{	test:'(itmIsEqual 
									(itmSetProperty testItem1 'damaged True)
									testItem2
									)														result:Nil	}
						{	test:'(itmIsEqual 
									(itmSetProperty testItem1 'charges 10)
									testItem2
									)														result:Nil	}
						{	test:'(itmIsEqual 
									(itmSetEnhanced testItem1 0x102)
									testItem2
									)														result:Nil	}
						{	test:'(itmIsEqual 
									(itmSetData testItem1 'test 10)
									testItem2
									)														result:Nil	}

						{	test:'(itmIsEqual 
									(itmSetProperty testItem1 'charges 10)
									testItem2
									'ignoreCharges
									)														result:True	}
						{	test:'(itmIsEqual 
									(itmSetProperty testItem1 'charges 10)
									testItem2
									'ignoreEnhancements
									)														result:Nil	}
						{	test:'(itmIsEqual 
									(itmSetEnhanced testItem1 0x102)
									testItem2
									'ignoreEnhancements
									)														result:True	}
						{	test:'(itmIsEqual 
									(itmSetEnhanced testItem1 0x102)
									testItem2
									'ignoreCharges
									)														result:Nil	}
						{	test:'(itmIsEqual 
									(itmSetEnhanced testItem1 0x102)
									testItem2
									'(ignoreCharges ignoreData ignoreEnhancements)
									)														result:True	}
						{	test:'(itmIsEqual 
									(itmSetData testItem1 'test 10)
									testItem2
									'ignoreData
									)														result:True	}
						{	test:'(itmIsEqual 
									(itmSetData testItem1 'test 10)
									testItem2
									'ignoreCharges
									)														result:Nil	}

						;	itmMatches -----------------------------------------

						{	test:'(itmMatches testItem1 "w")								result:True	}
						{	test:'(itmMatches testItem1 "*~s")								result:True	}
						{	test:'(itmMatches testItem1 "*~w")								result:Nil	}
						{	test:'(itmMatches testItem1 "w +energyWeapon;")					result:True	}
						{	test:'(itmMatches testItem1 "w -launcher;")						result:True	}
						{	test:'(itmMatches testItem1 "w =1;")							result:True	}
						{	test:'(itmMatches testItem1 "w L:1-4;")							result:True	}
						{	test:'(itmMatches testItem1 "w L:2-5;")							result:Nil	}
						{	test:'(itmMatches testItem1 "w +unid:&itLaserCannon;;")			result:True	}

						{	test:'(itmMatches testItem1 "w +property:omnidirectional;")		result:Nil	}
						{	test:'(itmMatches testItem1 "w +property:deviceSlots;")			result:True	}
						{	test:'(itmMatches testItem1 "w +property:deviceSlots=1;")		result:True	}
						{	test:'(itmMatches testItem1 "w +property:deviceSlots=2;")		result:Nil	}
						{	test:'(itmMatches testItem1 "w +property:deviceSlots&gt;1;")	result:Nil	}
						{	test:'(itmMatches testItem1 "w +property:deviceSlots&gt;=1;")	result:True	}
						{	test:'(itmMatches testItem1 "w +property:deviceSlots&lt;1;")	result:Nil	}
						{	test:'(itmMatches testItem1 "w +property:deviceSlots&lt;=1;")	result:True	}
						{	test:'(itmMatches testItem1 "w +property:deviceSlots!=1;")		result:Nil	}
						{	test:'(itmMatches testItem1 "w +property:deviceSlots!=3;")		result:True	}

						;	Test Scaled Armor ----------------------------------

						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itTestArmorScaled; 1) 'level 5)
									'level
									)														result:5	}
						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itTestArmorScaled; 1) 'level 5)
									'hp
									)														result:166	}
						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itTestArmorScaled; 1) 'level 5)
									'price
									)														result:4000	}
						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itTestArmorScaled; 1) 'level 5)
									'repairCost
									)														result:3	}
						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itTestArmorScaled; 1) 'level 5)
									'repairLevel
									)														result:5	}
						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itTestArmorScaled; 1) 'level 5)
									'powerUse
									)														result:40	}
						{	test:'(itmGetProperty 
									(itmSetProperty 
										(itmSetProperty (itmCreate &itTestArmorScaled; 1) 'hp 50)
										'level 5
										)
									'hp
									)														result:83	}

						;	Test Scaled Weapons --------------------------------

						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itTestWeaponScaled; 1) 'level 5)
									'level
									)														result:5	}

						;	Item Custom Properties -----------------------------

						{	test:'(itmGetProperty &itTestArmorScaled; 'test.constant1)		result:'foo	}
						{	test:'(itmGetProperty &itTestArmorScaled; 'test.constant2)		result:1	}
						{	test:'(itmGetProperty &itTestArmorScaled; 'test.constant3)		result:2	}
						{	test:'(itmGetProperty &itTestArmorScaled; 'test.global1)		result:17	}
						{	test:'(itmGetProperty &itTestArmorScaled; 'test.global2)		result:4	}
						{	test:'(itmGetProperty &itTestArmorScaled; 'test.data1)			result:1	}
						{	test:'(itmGetProperty &itTestArmorScaled; 'test.data2)			result:2	}
						{	test:'(itmGetProperty &itTestArmorScaled; 'test.dynamicData1)	result:1	}
						{	test:'(itmGetProperty &itTestArmorScaled; 'test.dynamicData2)	result:4	}

						;	Item Properties ------------------------------------

						{	test:'(itmGetProperty &itWeaponSpeedROM; 'known)				result:Nil	}
						{	test:'(typGetProperty &itWeaponSpeedROM; 'known)				result:Nil	}
						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itWeaponSpeedROM; 1) 'unknownTypeIndex 0)
									'known)													result:Nil	}
						{	test:'(itmSetProperty 
									(itmSetProperty (itmCreate &itWeaponSpeedROM; 1) 'unknownTypeIndex 0)
									'known True)											result:'ignore	}
						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itWeaponSpeedROM; 1) 'unknownTypeIndex 0)
									'known)													result:True	}
						{	test:'(itmGetProperty &itWeaponSpeedROM; 'known)				result:Nil	}
						{	test:'(typGetProperty &itWeaponSpeedROM; 'known)				result:Nil	}
						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itWeaponSpeedROM; 1) 'unknownTypeIndex 1)
									'known)													result:Nil	}
						{	test:'(itmSetProperty 
									(itmSetProperty (itmCreate &itWeaponSpeedROM; 1) 'unknownTypeIndex 1)
									'known True)											result:'ignore	}
						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itWeaponSpeedROM; 1) 'unknownTypeIndex 1)
									'known)													result:True	}
						{	test:'(itmGetProperty &itWeaponSpeedROM; 'known)				result:Nil	}
						{	test:'(typSetProperty &itWeaponSpeedROM; 'known True)			result:True	}
						{	test:'(itmGetProperty &itWeaponSpeedROM; 'known)				result:True	}
						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itWeaponSpeedROM; 1) 'unknownTypeIndex 2)
									'known)													result:True	}
						{	test:'(itmSetProperty 
									(itmSetProperty (itmCreate &itWeaponSpeedROM; 1) 'unknownTypeIndex 2)
									'known Nil)												result:'ignore	}
						{	test:'(itmGetProperty &itWeaponSpeedROM; 'known)				result:Nil	}
						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itWeaponSpeedROM; 1) 'unknownTypeIndex 1)
									'known)													result:True	}
						{	test:'(itmSetProperty &itWeaponSpeedROM; 'known Nil)			result:'ignore	}
						{	test:'(itmGetProperty 
									(itmSetProperty (itmCreate &itWeaponSpeedROM; 1) 'unknownTypeIndex 1)
									'known)													result:Nil	}

						;	Various weapon properties ----------------------------------------------

						{	test:'(itmGetProperty &itLaserCannon; 'hp)						result:0	}
						{	test:'(itmGetProperty &itLaserCannon; 'interaction)				result:0	}
						{	test:'(itmGetProperty &itLaserCannon; 'lifetime)				result:30	}
						{	test:'(itmGetProperty &itLaserCannon; 'range)					result:60	}
						{	test:'(itmGetProperty &itLaserCannon; 'speed)					result:100	}

						{	test:'(itmGetProperty &itRecoillessCannon; 'hp)					result:2	}
						{	test:'(itmGetProperty &itRecoillessCannon; 'interaction)		result:47	}
						{	test:'(itmGetProperty &itRecoillessCannon; 'lifetime)			result:60	}
						{	test:'(itmGetProperty &itRecoillessCannon; 'range)				result:48	}
						{	test:'(itmGetProperty &itRecoillessCannon; 'speed)				result:40	}

						{	test:'(itmGetProperty &itOracusHarassPower; 'hp)				result:0	}
						{	test:'(itmGetProperty &itOracusHarassPower; 'interaction)		result:100	}
						{	test:'(itmGetProperty &itOracusHarassPower; 'lifetime)			result:40	}
						{	test:'(itmGetProperty &itOracusHarassPower; 'range)				result:12	}
						{	test:'(itmGetProperty &itOracusHarassPower; 'speed)				result:0	}

						{	test:'(itmGetProperty &itMorningStarCannon; 'hp)				result:0	}
						{	test:'(itmGetProperty &itMorningStarCannon; 'interaction)		result:100	}
						{	test:'(itmGetProperty &itMorningStarCannon; 'lifetime)			result:60	}
						{	test:'(itmGetProperty &itMorningStarCannon; 'range)				result:48	}
						{	test:'(itmGetProperty &itMorningStarCannon; 'speed)				result:40	}

						{	test:'(itmGetProperty &itTestWeaponRelativistic; 'hp)			result:0	}
						{	test:'(itmGetProperty &itTestWeaponRelativistic; 'interaction)	result:100	}
						{	test:'(itmGetProperty &itTestWeaponRelativistic; 'lifetime)		result:3	}
						{	test:'(itmGetProperty &itTestWeaponRelativistic; 'range)		result:60	}
						{	test:'(itmGetProperty &itTestWeaponRelativistic; 'speed)		result:1000	}

						{	test:'(itmGetProperty &itSmartCannon; 'hp)						result:6	}
						{	test:'(itmGetProperty &itSmartCannon; 'interaction)				result:50	}
						{	test:'(itmGetProperty &itSmartCannon; 'lifetime)				result:60	}
						{	test:'(itmGetProperty &itSmartCannon; 'range)					result:60	}
						{	test:'(itmGetProperty &itSmartCannon; 'speed)					result:50	}

						{	test:'(itmGetProperty &itSmartCannonShell; 'hp)					result:6	}
						{	test:'(itmGetProperty &itSmartCannonShell; 'interaction)		result:50	}
						{	test:'(itmGetProperty &itSmartCannonShell; 'lifetime)			result:60	}
						{	test:'(itmGetProperty &itSmartCannonShell; 'range)				result:60	}
						{	test:'(itmGetProperty &itSmartCannonShell; 'speed)				result:50	}
						))

					;	Unit Tests on Armor Damage

					(diagRun (list

						;	Set up

						(lambda ()
							(block (i)
								(setq gPlayerShip (sysCreateShip &scSapphirePlayer; Nil &svPlayer;))
								(if (not gPlayerShip)
									(error "Unable to create player ship.")
									)
								(shpOrder gPlayerShip 'hold)

								;	Install carbide carapace

								(objAddItem gPlayerShip (itmCreate &itCarbideCarapace; 4))
								(for i 0 3
									(shpInstallArmor gPlayerShip (itmCreate &itCarbideCarapace; 1) i)
									)
								)
							)

						;	Some tests

						(lambda ()
							(block (
								(armorSeg (shpGetArmor gPlayerShip 0))
								damageDone
								hpLeft
								hpAdjusted
								armorSeg2
								)
								;	Make sure the armor gets its completion bonus

								(if (!= (objGetItemProperty gPlayerShip armorSeg 'hp) 300)
									(error (cat (itmGetName armorSeg 0) ": Expected 300 HP."))
									)

								;	Cause damage

								(setq damageDone (shpDamageArmor gPlayerShip armorSeg 'generic 100))
								(if (!= damageDone 100)
									(error "Generic damage did not cause 100 hp.")
									)

								(setq hpLeft (- 300 damageDone))
								(if (!= (objGetItemProperty gPlayerShip armorSeg 'hp) hpLeft)
									(error (cat (itmGetName armorSeg 0) ": Expected " hpLeft " HP."))
									)

								;	Remove the segment (replace with stock reactive armor)

								(if (not (shpInstallArmor gPlayerShip (itmCreate &itReactiveArmor; 1) 0))
									(error "Unable to install reactive armor.")
									)

								;	Find uninstalled carbide carapace

								(setq armorSeg (@ (objGetItems gPlayerShip "aU +unid:&itCarbideCarapace;") 0))
								(if (not armorSeg)
									(error "Unable to find uninstalled carbide carapact.")
									)

								;	Hit points change because once uninstalled we lose the
								;	completion bonus.

								(setq hpAdjusted 133)

								;	Check hit points.

								(if (!= (itmGetProperty armorSeg 'hp) hpAdjusted)
									(error (cat "Incorrect HP after uninstall: " (itmGetProperty armorSet 'hp)))
									)

								;	Remaining installed segments also lose their completion
								;	bonus.

								(setq armorSeg2 (shpGetArmor gPlayerShip 1))
								(if (not armorSeg2)
									(error "Unable to find other armor segment.")
									)

								(if (!= (objGetItemProperty gPlayerShip armorSeg2 'hp) 200)
									(error "Carbide carapace did not have 200 hp.")
									)

								;	Install the damaged segment back.

								(if (not (shpInstallArmor gPlayerShip armorSeg 0))
									(error "Unable to install carbide carapace.")
									)

								;	On re-install we only end up with 199 hit points, due to round-off
								;	error.

								(setq armorSeg (shpGetArmor gPlayerShip 0))
								(if (!= (objGetItemProperty gPlayerShip armorSeg 'hp) 199)
									(error "Re-installed carbide carapace does not have 199 hit points.")
									)

								;	Set properties

								(setq armorSeg (objSetItemProperty gPlayerShip armorSeg 'hp 200))
								(if (!= (objGetItemProperty gPlayerShip armorSeg 'hp) 200)
									(error "Set HP property on installed armor failed.")
									)

								(setq armorSeg2 (@ (objGetItems gPlayerShip "aU +unid:&itReactiveArmor;") 0))
								(setq armorSeg2 (objSetItemProperty gPlayerShip armorSeg2 'hp 4))
								(if (!= (objGetItemProperty gPlayerShip armorSeg2 'hp) 4)
									(error "Set HP property on loose armor failed.")
									)
								)
							)

						;	Clean up

						(lambda ()
							(block ()
								(objDestroy gPlayerShip)
								(setq gPlayerShip Nil)
								)
							)
						))
					)
			</OnGlobalStartDiagnostics>
		</Events>
	</Type>

</TranscendenceModule>
