<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>
	
<!-- DIALOG SCREEN =============================================================

	This screen is used to show simple dialog.

	gData is a list of paneDesc. Each paneDesc has the following fields:
	
		desc: The description to show for the pane. [This should be literal text
				after translation.]
				
		actions: This is a list of actionDesc structures representing the set
				of actions for this pane.
		
		nextLabel: This field indicates that we should have a single action to
				advance to the next pane. This is the label for the action.
				[Valid only if actions is Nil.]
				
		nextCode: This is a lambda function to execute when we advance to the
				next pane.
				[Valid only if acitons is Nil.]
				
		id: An optional identifier for the pane.
				
	An actionDesc structure has the following fields:
	
		label: The label for the action. This is required.
		
		nextPane: The next pane to advance to, by ID. If this value is Nil, then
				we exit the screen. If this is the special value 'forceUndock
				then we exit and undock.
		
		code: An optional lambda function to execute when this action is
				selected.
				
	Alternatively, gData is a struct with the following options:
	
		dialog: A list of paneDesc (as above)
		
		dialogID: A text ID to translate to obtain the dialog.
		
		translateType: The type to use for translating dialogID and any IDs 
				inside the dialog.

-->

	<DockScreen UNID="&dsRPGDialog;"
			nestedScreen=		"true"
			inherit=			"&dsDockScreenBase;"
			>
		<Panes>
			<Default>
				<OnPaneInit>
					(switch
						(!= (typeof gData) 'struct)
							(rpgPagePaneInit gScreen gData)
						
						(@ gData 'dialog)
							(rpgPagePaneInit gScreen (@ gData 'dialog) {
								translateType: (@ gData 'translateType)
								})
								
						(@ gData 'dialogID)
							(rpgPagePaneInit gScreen 
								(or (scrTranslate gScreen (@ gData 'dialogID)) (typTranslate (@ gData 'translateType) (@ gData 'dialogID)))
								{
									translateType: (@ gData 'translateType)
									}
								)
						
						(rpgPagePaneInit gScreen gData)
						)
				</OnPaneInit>

				<Actions>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>
	
<!-- GLOBALS -->
	
	<Globals>
		(block Nil
			(setq rpgFindIndexByID (lambda (dialogDesc id)
				(block (
					(i 0)
					(pageFound Nil)
					)
					
					(enumwhile dialogDesc (not pageFound) pageDesc
						(block Nil
							(if (eq (@ pageDesc 'id) id)
								(setq pageFound i)
								)
								
							(setq i (add i 1))
							)
						)
						
					pageFound
					)
				))

			(setq rpgPageCount (lambda (textDesc)
				(switch
					(isatom textDesc) 
						1

					(= (typeOf textDesc) 'struct)
						1
						
					(count textDesc)
					)
				))

			(setq rpgPageDesc (lambda (textDesc pageNo)
				(block (pageDesc)
					(switch
						(eq (typeof textDesc) 'struct)
							(setq pageDesc textDesc)

						(eq (typeof textDesc) 'string)
							(setq pageDesc {
								desc: textDesc
								})

						(eq (typeof (@ textDesc pageNo)) 'struct)
							(setq pageDesc (@ textDesc pageNo))

						(setq pageDesc {
							desc: (@ textDesc pageNo)
							})
						)

					(if (not (@ pageDesc 'desc))
						(set@ pageDesc 'desc "You have successfully completed the mission.")
						)

					(if (and (@ pageDesc 'nextLabel) (not (@ pageDesc 'nextKey)))
						(set@ pageDesc 'nextKey
							(@ (regex (@ pageDesc 'nextLabel) "{$?}*{{$A}+}{$?}*" 'subex) 1)
							)
						)

					pageDesc
					)
				))
				
			(setq rpgPagePaneInit (lambda (theScreen textDesc options)
			
				;	This function is used to set up a pane with the multi-page
				;	script structure.
				;
				;	textDesc is a list of page descriptors (or a plain string).
				;
				;	(scrGetData gScreen 'curPage) is the current page to display.
				;	A value of Nil means that we should show the first page.
				;
				;	The set of actions for a page is determined as follows:
				;
				;	If we're on the last page and (@ options 'onAcceptDecline) is
				;	set, then we show Accept/Decline options (we ignore any
				;	actions definitions).
				;
				;	If we have (@ pageDesc 'actions) then we create an action
				;	for each entry. The nextPage field on the action descriptor
				;	has the following possibilities:
				;
				;		'exitScreen: We unconditionally exit the screen. [Not
				;				valid if (@ options 'onExitPane) is defined.]
				;
				;		'forceUndock: We unconditionally exit the screen and
				;				for an undock. [Not valid if (@ options 'onExitPane)
				;				is defined.]
				;
				;		'missionAccept: Accept the mission.
				;
				;		'missionDecline: Decline the mission.
				;
				;		'nextPage: We advance to the next page (by
				;				reloading the pane) or invoke the exitPane
				;				action (see below) if we're at the last page.
				;
				;		Nil: Like 'nextPage, except that we also exit if the
				;				next page has an ID.
				;
				;		'exitPane: We either invoke the (@ options 'onExitPane)
				;				code (if any) or just exit the screen.
				;
				;		{value}: For any other value, we look up the value as
				;				an ID in textDesc. If we find it, then we
				;				navigate to that page. Otherwise, we invoke
				;				(@ options 'onNavigate) and pass in the value
				;				as a parameter.
				;
				;	We accept the following options:
				;
				;		actionDoneID: Action ID to use for the done button (defaults to
				;				'actionDone).
				;
				;		translateType: Use this type for translations
				;
				;		translateData: Use this data for translations
				;
				;		missionObj: Required if 'onAcceptDecline is defined.
				;
				;		onAcceptDecline: (lambda (theScreen acceptDecline pageDesc options) ...)
				;				This function will handle a mission accept or decline.
				;
				;		onExitPane: (lambda (theScreen pageDesc options) ...)
				;				This function is called when we continue past the last
				;				page.
				;
				;		onNavigate: (lambda (theScreen nextPage pageDesc options) ...)
				;				This function does a custom navigation.
				
				(block (
					(pageCount (rpgPageCount textDesc))
					(pageNo (or (scrGetData theScreen 'curPage) 0))
					(pageDesc (rpgPageDesc textDesc pageNo))

					(firstPageDesc (rpgPageDesc textDesc 0))
					(translateID (or (@ firstPageDesc 'translateType) (@ options 'translateType)))
					(translateData (or (@ pageDesc 'data) (@ options 'translateData) gData))
					(descID (or (@ pageDesc 'descID) (@ pageDesc 'textID)))
					
					(actions (@ pageDesc 'actions))
					(atLastPage (= pageNo (- pageCount 1)))

					(missionObj (@ options 'missionObj))
					(missionAutoAccept (msnGetProperty missionObj 'autoAccept))

					(nextActionID 0)
					)
					
					;	Show the appropriate page

					(if descID
						(scrSetDesc theScreen (or
							(and missionObj (msnTranslate missionObj descID translateData))
							(and translateID (typTranslate translateID descID translateData))
							(scrTranslate theScreen descID translateData)
							))
						(scrSetDesc theScreen (@ pageDesc 'desc))
						)
					
					;	Make sure the actions list is properly initialized.
					
					(switch
						;	If we already have a list of actions, then we accept
						;	those and assume that the caller knows what they are
						;	doing.

						(= (typeof actions) 'list)
							Nil

						;	If we're on an Accept/Decline mission page but the 
						;	mission does not support declining, then we just have
						;	a single action.
						
						(and (@ options 'onAcceptDecline)
								(or atLastPage (= actions 'acceptDecline))
								missionAutoAccept
								)
							(setq actions (list
								{
									label: 
										(switch
											(= missionAutoAccept 'acceptAndContinue)
												(or 
													(scrTranslate theScreen 'actionContinue) 
													(typTranslate &unidCommonText; 'actionContinue)
													)

											(= missionAutoAccept 'acceptAndExit)
												(or 
													(scrTranslate theScreen 'actionUndock) 
													(typTranslate &unidCommonText; 'actionUndock)
													)
											)

									code: (@ pageDesc 'acceptCode)
									nextPage: 'missionAccept
									}
								))
						
						;	If we're on an Accept/Decline mission page and we're 
						;	at the last page (or if actions == 'acceptDecline), then
						;	we show Accept/Decline actions.
						
						(and (@ options 'onAcceptDecline)
								(or atLastPage (= actions 'acceptDecline))
								)
							(setq actions (list
								{
									label: (or (@ pageDesc 'acceptLabel)
										(msnTranslate missionObj (@ pageDesc 'acceptLabelID))
										(msnTranslate missionObj 'AcceptLabel)
										(typTranslate &unidCommonText; 'actionAccept)
										)
									code: (@ pageDesc 'acceptCode)
									nextPage: 'missionAccept
									}
								{
									label: (or (@ pageDesc 'declineLabel)
										(msnTranslate missionObj (@ pageDesc 'declineLabelID))
										(msnTranslate missionObj 'DeclineLabel)
										(typTranslate &unidCommonText; 'actionDecline)
										)
									code: (@ pageDesc 'declineCode)
									nextPage: 'missionDecline
									}
								))
							
						;	If we don't have a list of actions, then we auto-generate 
						;	them based on variables on the page descriptor.
						
						(!= (typeof actions) 'list)
							(setq actions (list {
								label: (or 
									(@ pageDesc 'label) 
									(@ pageDesc 'nextLabel) 
									(and missionObj (msnTranslate missionObj (@ pageDesc 'labelID)))
									(and translateID (typTranslate translateID (@ pageDesc 'labelID)))
									(scrTranslate theScreen (@ pageDesc 'labelID))
									)
								nextPage: (or (@ pageDesc 'nextPage) (@ pageDesc 'nextPane) 'nextPage)
								code: (or (@ pageDesc 'code) (@ pageDesc 'nextCode))
								}))
						)
						
					;	Initialize all actions.
					
					(enum actions actionDesc
						(block (
							(nextPage (or (@ actionDesc 'nextPage) (@ actionDesc 'nextPane)))
							
							(actionID (cat "action" nextActionID))
							(actionDoneID (or (@ options 'actionDoneID) 'actionDone))

							;	Figure out the label, if we don't have one.
							
							(actionLabel
								(switch
									(@ actionDesc 'label)
										(@ actionDesc 'label)

									(@ actionDesc 'labelID)
										(or (and missionObj (msnTranslate missionObj (@ actionDesc 'labelID)))
												(and translateID (typTranslate translateID (@ actionDesc 'labelID)))
												(scrTranslate theScreen (@ actionDesc 'labelID))
												)
										
									;	If we're continuing, and at the last page, then we
									;	use the [D]one label.
									
									(and (or (not nextPage) (= nextPage 'nextPage))
											atLastPage
											)
										(or (scrTranslate theScreen actionDoneID) (typTranslate &unidCommonText; actionDoneID))
										
									;	If we've got an explicit exit, then use the [D]one
									;	label.
									
									(or (= nextPage 'exitPane) (= nextPage 'exitScreen))
										(or (scrTranslate theScreen actionDoneID) (typTranslate &unidCommonText; actionDoneID))
										
									;	If we've got an explicit undock, then use the [U]ndock
									;	label.
									
									(= nextPage 'forceUndock)
										(or (scrTranslate theScreen 'actionUndock) (typTranslate &unidCommonText; 'actionUndock))
										
									;	Otherwise, we use the [C]ontinue label.
										
									(or (scrTranslate theScreen 'actionContinue) (typTranslate &unidCommonText; 'actionContinue))
									)
								)
								
							;	Figure out accelerators
							
							(actionAccel
								(switch
									(= (count actions) 1)
										(list "default" "cancel")
									(and (@ actionDesc 'default) (@ actionDesc 'cancel))
										(list "default" "cancel")
									(or (= nextActionID 0)
											(@ actionDesc 'default)
											)
										"default"
									(or (= nextActionID (subtract (count actions) 1))
											(@ actionDesc 'cancel)
											)
										"cancel"
									Nil
									)
								)
							(actionCode (@ actionDesc 'code))
							(nextPageNo Nil)
							)
							
							;	We don't support explicit exit if we've got an onExitPane
							;	option.
							
							(if (and (or (= nextPage 'exitScreen) (= nextPage 'forceUndock))
										(@ options 'onExitPane)
										)
								(setq nextPage Nil)
								)
								
							;	We don't support mission accept/decline unless we've got a
							;	mission object and onAcceptDecline.
							
							(if (and (or (= nextPage 'missionAccept) (= nextPage 'missionDecline))
										(or (not (@ options 'onAcceptDecline)) (not missionObj))
										)
								(setq nextPage Nil)
								)
							
							;	Generate appropriate action
							
							(switch
								;	If we're continuing, and we're at the last page
								;	then we exit.
								
								(or (= nextPage 'exitPane)
									(and atLastPage
										(or (not nextPage) (= nextPage 'nextPage))
										)
									(and (not nextPage)
										(@ (rpgPageDesc textDesc (+ pageNo 1)) 'id)
										)
									)
									(scrAddAction theScreen actionID Nil actionLabel Nil actionAccel
										(lambda ()
											(block Nil
												(if actionCode (actionCode))
													
												(scrSetData theScreen 'curPage Nil)
												(if (@ options 'onExitPane)
													((@ options 'onExitPane) theScreen pageDesc options)
													(scrExitScreen theScreen)
													)
												)
											)
										)

								;	If we're continuing, then go to the next page.
								
								(or (not nextPage) (= nextPage 'nextPage))
									(scrAddAction theScreen actionID Nil actionLabel Nil actionAccel
										(lambda ()
											(block Nil
												(if actionCode (actionCode))
													
												(scrSetData theScreen 'curPage (+ pageNo 1))
												(scrShowPane theScreen (@ (scrGetScreen theScreen) 'pane))
												)
											)
										)
								
								(= nextPage 'exitScreen)
									(scrAddAction theScreen actionID Nil actionLabel Nil actionAccel
										(lambda ()
											(block Nil
												(if actionCode (actionCode))
													
												(scrExitScreen theScreen)
												)
											)
										)
								
								(= nextPage 'forceUndock)
									(scrAddAction theScreen actionID Nil actionLabel Nil actionAccel
										(lambda ()
											(block Nil
												(if actionCode (actionCode))
													
												(scrExitScreen theScreen 'forceUndock)
												)
											)
										)
									
								(= nextPage 'missionAccept)
									(scrAddAction theScreen actionID Nil actionLabel Nil actionAccel
										(lambda ()
											(block Nil
												(if actionCode (actionCode))
													
												((@ options 'onAcceptDecline) theScreen 'accept pageDesc options)
												)
											)
										)
								
								(= nextPage 'missionDecline)
									(scrAddAction theScreen actionID Nil actionLabel Nil actionAccel
										(lambda ()
											(block Nil
												(if actionCode (actionCode))
													
												((@ options 'onAcceptDecline) theScreen 'decline pageDesc options)
												)
											)
										)
										
								;	If we have a new page number by ID, then navigate to it.
								
								(setq nextPageNo (rpgFindIndexByID textDesc nextPage))
									(scrAddAction theScreen actionID Nil actionLabel Nil actionAccel
										(lambda ()
											(block Nil
												(if actionCode (actionCode))
													
												(scrSetData theScreen 'curPage nextPageNo)
												(scrShowPane theScreen (@ (scrGetScreen theScreen) 'pane))
												)
											)
										)

								;	Sometimes we just want the code to execute and not 
								;	navigate

								(= nextPage 'code)
									(scrAddAction theScreen actionID Nil actionLabel Nil actionAccel
										(lambda ()
											(if actionCode (actionCode))
											)
										)
										
								;	If we have onNavigate, invoke that
								
								(@ options 'onNavigate)
									(scrAddAction theScreen actionID Nil actionLabel Nil actionAccel
										(lambda ()
											(block Nil
												(if actionCode (actionCode))
													
												((@ options 'onNavigate) theScreen nextPage pageDesc options)
												)
											)
										)
								)
							
							;	Next action ID
											
							(setq nextActionID (add nextActionID 1))
							)
						)
					)
				))
			)
	</Globals>

</TranscendenceModule>
