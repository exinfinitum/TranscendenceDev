<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- LEVEL V ITEMS -->

	<!-- itIncandescentStrawberries
	
	EXTRA DATA:
	
	expireTime:			After this time, food is rotted
	status:				Current state
							Nil =			Fresh
							'ripe =			Ripe
							'rotted =		Rotted
	
	-->

	<ItemType UNID="&itIncandescentStrawberries;"
			name=				"[case(s) of ]strawberries"
			level=				"5"
			value=				"250"
			mass=				"5"
			frequency=			"notrandom"
			numberAppearing=	"1d12"
			attributes=			"Consumable; consumerGood, Food; FreshFood; Lux; Specialty"

			description=		"Fresh strawberries are a delicacy found only near living worlds."
			>

		<Image imageID="&rsItems1;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>
		
		<StaticData>
			<expireTime>5400</expireTime>
			<priceIncrease>200</priceIncrease>
		</StaticData>
		
		<Events>
			<GetName>
				(list (cat "[case of " (stkFreshFoodStatus gItem) " ]strawberries") 0x02)
			</GetName>
			
			<GetTradePrice>
				(stkFreshFoodPrice gItem)
			</GetTradePrice>
			
			<OnUpdate>
				(stkFreshFoodUpdate gSource gItem)
			</OnUpdate>
		</Events>
	</ItemType>

	<ItemType UNID="&itIncandescentPeaches;"
			name=				"[case(s) of ]white peaches"
			level=				"5"
			value=				"300"
			mass=				"5"
			frequency=			"notrandom"
			numberAppearing=	"1d12"
			attributes=			"Consumable; consumerGood, Food; FreshFood; Lux; Specialty"

			description=		"White peaches are a delicacy found only near living worlds."
			>

		<Image imageID="&rsItems1;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>
		
		<StaticData>
			<expireTime>7200</expireTime>
			<priceIncrease>150</priceIncrease>
		</StaticData>
		
		<Events>
			<GetName>
				(list (cat "[case of " (stkFreshFoodStatus gItem) " ]white peaches") 0x02)
			</GetName>
			
			<GetTradePrice>
				(stkFreshFoodPrice gItem)
			</GetTradePrice>
			
			<OnUpdate>
				(stkFreshFoodUpdate gSource gItem)
			</OnUpdate>
		</Events>
	</ItemType>

	<ItemType UNID="&itIncandescentBellFruit;"
			name=				"[case(s) of ]bellfruits"
			level=				"5"
			value=				"450"
			mass=				"5"
			frequency=			"notrandom"
			numberAppearing=	"1d12"
			attributes=			"Consumable; consumerGood, Food; FreshFood; Lux; Specialty"

			description=		"Bellfruits are a delicacy found only near living worlds."
			>

		<Image imageID="&rsItems1;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>
		
		<StaticData>
			<expireTime>7200</expireTime>
			<priceIncrease>150</priceIncrease>
		</StaticData>
		
		<Events>
			<GetName>
				(list (cat "[case of " (stkFreshFoodStatus gItem) " ]bellfruit") 0x02)
			</GetName>
			
			<GetTradePrice>
				(stkFreshFoodPrice gItem)
			</GetTradePrice>
			
			<OnUpdate>
				(stkFreshFoodUpdate gSource gItem)
			</OnUpdate>
		</Events>
	</ItemType>

	<ItemType UNID="&itIncandescentLucuma;"
			name=				"[case(s) of ]lucumas"
			level=				"5"
			value=				"300"
			mass=				"5"
			frequency=			"notrandom"
			numberAppearing=	"1d12"
			attributes=			"Consumable; consumerGood, Food; FreshFood; Lux; Specialty"

			description=		"Lucumas are a delicious fruit found only near living worlds."
			>

		<Image imageID="&rsItems1;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>
		
		<StaticData>
			<expireTime>10800</expireTime>
			<priceIncrease>100</priceIncrease>
		</StaticData>
		
		<Events>
			<GetName>
				(list (cat "[case of " (stkFreshFoodStatus gItem) " ]lucumas") 0x02)
			</GetName>
			
			<GetTradePrice>
				(stkFreshFoodPrice gItem)
			</GetTradePrice>
			
			<OnUpdate>
				(stkFreshFoodUpdate gSource gItem)
			</OnUpdate>
		</Events>
	</ItemType>

	<ItemType UNID="&itIncandescentCoffee;"
			name=				"[kilo(s) of ]Incandescent coffee"
			level=				"6"
			value=				"800"
			mass=				"1"
			frequency=			"notrandom"
			numberAppearing=	"1d12"
			attributes=			"Consumable; consumerGood, Food; Lux; Specialty"

			description=		"Coffee beans from the tropical regions of the planet Incandescent are famous throughout Human Space."
			>

		<Image imageID="&rsItems1;" imageX="288" imageY="0" imageWidth="96" imageHeight="96"/>
	</ItemType>

<!-- DOCK SCREENS -->

	<!-- Arcology -->

	<DockScreen UNID="&dsStKatsArcology;"
			inherit=			"&dsDockScreenBase;"
			>
		
		<Panes>
			<Default descID="descWelcome">
				<Actions>
					<Action id="actionParliament">
						(scrShowScreen gScreen &dsStKatsArcologyParliament;)
					</Action>

					<Action id="actionCommerce">
						(scrShowScreen gScreen &dsStKatsArcologyCommerce;)
					</Action>

					<Action id="actionUniversity">
						(scrShowScreen gScreen &dsStKatsArcologyUniversity;)
					</Action>

					<Action id="actionArts">
						(scrShowScreen gScreen &dsStKatsArcologyArts;)
					</Action>

					<Action id="actionDockServices">
						(rpgDockServices gPlayerShip {
							checkMilitaryID: True
							})
					</Action>

					<Action id="actionUndock" cancel="1">
						<Exit/>
					</Action>
				</Actions>
			</Default>
		</Panes>
		<Language>
			<Text id="actionParliament">[P]arliament Quarter</Text>
			<Text id="actionCommerce">[C]ommerce Quarter</Text>
			<Text id="actionUniversity">U[n]iversity Quarter</Text>
			<Text id="actionArts">[A]rts Quarter</Text>

			<Text id="descWelcome">Welcome to the Arcology of New Victoria!</Text>
		</Language>
	</DockScreen>
	
	<!-- Parliament Quarter -->
	
	<DockScreen UNID="&dsStKatsArcologyParliament;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<HeroImage imageID="&rsStKatsArcologyHero;"		imageX="0" imageY="1944" imageWidth="1200" imageHeight="648"/>

		<Panes>
			<Default descID="descParliamentQuarter">
				<Actions>
					<Action id="actionParliament" default="1">
						(rpgMissionAssignment {
							missionCriteria: "n +stKatsParliament; =4;"
							displayCriteria: "n +stKatsParliament;"
							noMissionTextID: 'descParliamentEmpty
							maxPerStation: (+ 3 (modulo (objGetDestiny gSource) 3))
							intervalPerStation: (random 2400 3600)
							})
					</Action>
					
					<Action id="actionMilitia">
						(switch
							(not (milCanEnterCC))
								(scrShowScreen gScreen &dsRPGMessage; { desc: (scrTranslate gScreen 'descAccessDenied) })

							(= (typGetData &unidCommonwealthMilitia; 'rank) -1)
								(scrShowScreen gScreen &dsRPGMessage; { desc: (scrTranslate gScreen 'descTooManyFailures) })

							(rpgMissionAssignment {
								missionCriteria: (cat "n +stKatsMilitia; =" (sysGetLevel) ";")
								displayCriteria: "n +stKatsMilitia;"
								noMissionTextID: 'descNoMissions
								maxPerStation: (+ 3 (modulo (objGetDestiny gSource) 3))
								intervalPerStation: (random 3600 5400)
								})
							)
					</Action>

					<Action id="actionLeave" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>

		<Language>
			<Text id="actionParliament">[P]arliament</Text>
			<Text id="actionMilitia">[M]ilitia Headquarters</Text>
			<Text id="actionLeave">[L]eave</Text>

			<Text id="descParliamentQuarter">

				You are in the Parliament Quarter. Well-dressed men and women 
				walk along the wide avenues of the quarter,	making their way to
				jobs in the Commonwealth government.

			</Text>
			<Text id="descParliamentEmpty">

				You enter the beautiful hall where ministers from all over the 
				Commonwealth gather to legislate and debate.

				The hall is currently empty.

			</Text>
			<String id="descNoMissions">
			
				"Sorry, there are no missions currently available."
				
			</String>
			<String id="descTooManyFailures">
			
				"How about getting us a cup of tea or something? That's probably
				a mission you could handle."
				
			</String>
			<Text id="descAccessDenied">

				Two guards flank the door to the Headquarters. One of them 
				checks your ID against a computer list:

				"Sorry, %sir%, only experienced captains are allowed inside."

			</Text>
		</Language>
	</DockScreen>
	
	<!-- Commerce Quarter -->
	
	<DockScreen UNID="&dsStKatsArcologyCommerce;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<HeroImage imageID="&rsStKatsArcologyHero;"		imageX="0" imageY="2592" imageWidth="1200" imageHeight="648"/>

		<Panes>
			<Default descID="descCommerceQuarter">
				<Actions>
					<Action id="actionCommoditiesExchange" default="1">
						(scrShowScreen gScreen &dsRPGCommoditiesExchange;)
					</Action>
					
					<Action id="actionIncandescentExports">
						<ShowPane pane="IncandescentExports"/>
					</Action>
					
					<Action id="actionBuyShip">
						(scrShowScreen gScreen &dsRPGShipBroker;)
					</Action>

					<Action id="actionLeave" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
			
			<IncandescentExports descID="descIncandescentExports">
				<Actions>
					<Action name="Buy Items" default="1" key="B">
						(scrShowScreen gScreen &dsRPGCommoditiesExchangeBuy; {
							rpg.criteria: "* +food; +specialty;"
							})
					</Action>

					<Action id="actionLeave" cancel="1">
						(scrShowPane gScreen 'Default)
					</Action>
				</Actions>
			</IncandescentExports>
		</Panes>

		<Language>
			<Text id="actionIncandescentExports">[I]ncandescent Exports</Text>
			<Text id="actionLeave">[L]eave</Text>

			<Text id="descCommerceQuarter">

				The Commerce Quarter is filled with sharp-dressed people and glowing
				advertisements. A massive bioluminescent screen shows prices in front
				of the Commodities Exchange, while smaller signs point to boutique
				store fronts.

			</Text>
			<Text id="descIncandescentExports">

				Welcome to Incandescent Exports, specializing in selling unique items
				up from the surface of the planet.

			</Text>
		</Language>
	</DockScreen>
	
	<!-- University Quarter
	
	GLOBAL DATA (on stStKatsArcology)
	
	-->

	<DockScreen UNID="&dsStKatsArcologyUniversity;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<HeroImage imageID="&rsStKatsArcologyHero;"		imageX="0" imageY="1296" imageWidth="1200" imageHeight="648"/>

		<Panes>
			<Default descID="descUniversityQuarter">
				<Actions>
					<Action id="actionEngineering" default="1">
						<ShowPane pane="Engineering"/>
					</Action>
					
					<Action id="actionUniversityTaikon">
						(rpgMissionAssignment {
							missionCriteria: (cat "n +stKatsTaikon; =" (sysGetLevel) ";")
							displayCriteria: "n +stKatsTaikon;"
							noMissionTextID: 'descTaikonEmpty
							})
					</Action>
					
					<Action id="actionUniversityHospital">
						(rpgMissionAssignment {
							missionCriteria: (cat "n +stKatsHospital; =" (sysGetLevel) ";")
							displayCriteria: "n +stKatsHospital;"
							noMissionTextID: 'descHospitalEmpty
							})
					</Action>

					<Action id="actionLeave" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
			
			<Engineering>
				<OnPaneInit>
					(block (roll course)
						; Pick a random item to enhance
						(setq roll (modulo (objGetDestiny gSource) 3))
						(switch
							(eq roll 0)
								(block Nil
									(setq gItem (random (objGetItems gPlayerShip "vI &lt;7 -alien;")))
									(setq course "starship engines")
									)
							(eq roll 1)
								(block Nil
									(setq gItem (random (objGetItems gPlayerShip "rI &lt;7 -alien;")))
									(setq course "starship reactors") 
									)
							(eq roll 2)
								(block Nil
									(setq gItem (random (objGetItems gPlayerShip "sI &lt;7 -alien; -nonEnergyShields;")))
									(setq course "shield generators")
									)
							(setq gItem Nil)
							)
							
						(if (itmIsEnhanced gItem) (setq gItem Nil))
						
						(setq gCost (intRoundUp (divide (multiply 20 (itmGetPrice gItem 'credit)) 100) 10))

						(scrSetDesc gScreen
							"You enter a large computer-controlled engineering lab filled with students. "
							"A professor approaches you:\n\n"
							"\"Our project this semester is on " course "."
							(if gItem
								(cat " For " gCost " credits we can "
									(if (itmIsDamaged gItem)
										"repair"
										"enhance"
										)
									" your ship's " (itmGetName gItem 0x80) "."
									(if (ls (plyGetCredits gPlayer) gCost)
										" Unfortunately, you cannot afford the cost."
										""
										)
									)
								""
								)
							"\""
							)
							
						(scrShowAction gScreen 0 gItem)
						(scrEnableAction gScreen 0 (geq (plyGetCredits gPlayer) gCost))
						(scrSetActionLabel gScreen 0
							(switch
								(itmMatches gItem "v")
									"Enhance Drive"
								(itmMatches gItem "r")
									"Enhance Reactor"
								(itmMatches gItem "s")
									"Enhance Shields"
								"Enhance"
								)
							"E"
							)
						)
				</OnPaneInit>
				
				<Actions>
					<Action name="Enhance ???" key="E">
						(block Nil
							(switch
								(not gItem)
									Nil
									
								(itmIsDamaged gItem)
									(block Nil
										(shpRepairItem gPlayerShip gItem)
										(setq gResult (cat "Your " (itmGetName gItem 0x81) " has been repaired."))
										)
										
								(block (result theEnhancement theType)
									(switch
										(itmMatches gItem "s")
											(block ()
												(setq theEnhancement (random '(0x0101 0x0102 0x0102 0x0103 0x0104 0x0905 0x0915 0x0925 0x0935 0x0F02 0x0F02)))
												(setq theType &vtUniversityEnhancement;)
												)

										(setq theEnhancement 0x0001)
										)
									
									(setq result (shpEnhanceItem gPlayerShip gItem {
										enhancement: theEnhancement
										type: theType
										}))
									(setq gResult (intItemEnhanceStatus result (cat "Your " (itmGetName gItem 0x80) " is more powerful") (itmGetName gItem 0x80)))
									)
								)
								
							(plyCharge gPlayer gCost)
							(scrShowPane gScreen "EnhanceSuccess")
							)
					</Action>
					
					<Action id="actionLeave" cancel="1">
						<ShowPane pane="Default"/>
					</Action>
				</Actions>
			</Engineering>
			
			<EnhanceSuccess>
				<OnPaneInit>
					(scrSetDesc gScreen gResult)
				</OnPaneInit>
				
				<Actions>
					<Action id="actionDone" default="1" cancel="1">
						<ShowPane pane="Default"/>
					</Action>
				</Actions>
			</EnhanceSuccess>
		</Panes>
		
		<Language>
			<Text id="actionDone">[D]one</Text>
			<Text id="actionEngineering">School of [E]ngineering</Text>
			<Text id="actionUniversityHospital">[U]niversity Hospital</Text>
			<Text id="actionUniversityTaikon">[T]aikon School of Exploration</Text>
			<Text id="actionLeave">[L]eave</Text>
			
			<Text id="descUniversityQuarter">

				The schools that make up the University of New Victoria are strung along
				the spine of the arcology. Students and professors make their way along
				the wide avenues.

			</Text>
			<Text id="descTaikonEmpty">

				You enter the Taikon School of Exploration. Several students are working
				at various terminals, but no one appears interested in talking with you.

			</Text>
			<Text id="descHospitalEmpty">

				You enter the brightly lit central garden of the New Victoria University Hospital.
				Recovering patients sit on articulated gurneys, while doctors and medtechs pass through,
				heads buried in datapads.

			</Text>
		</Language>
	</DockScreen>
	
	<!-- Arts Quarter -->

	<DockScreen UNID="&dsStKatsArcologyArts;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<HeroImage imageID="&rsStKatsArcologyHero;"		imageX="0" imageY="648" imageWidth="1200" imageHeight="648"/>

		<Panes>
			<Default descID="descArtsQuarter">
				<Actions>
					<Action id="actionVictorianClub" default="1">
						(scrShowScreen gScreen "&dsCommonwealthNightclub;")
					</Action>

					<Action id="actionLeave" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>

		<Language>
			<Text id="actionVictorianClub">The [V]ictorian Nightclub</Text>
			<Text id="actionLeave">[L]eave</Text>

			<Text id="descArtsQuarter">
				The trendy scene of the Arts Quarter draws tourists from all 
				over Human Space.
			</Text>
		</Language>
	</DockScreen>

	<ItemType UNID="&vtUniversityEnhancement;"
			name=				"St. Katharine University enhancement"
			virtual=			"true"
			level=				"1"
			>
		<Image imageID="&rsItems1;" imageX="288" imageY="768" imageWidth="96" imageHeight="96"/>
	</ItemType>

<!-- St Katharine's Star System -->

	<SystemType UNID="&ssStKatharine;" 
				noRandomEncounters=	"true"
				noExtraEncounters=	"true"
				backgroundID=		"&rsBrightStarSpace;"
				>

		<Tables>
			<!-- Random Stations -->
			
			<FriendlyOuterStations>
				<Table>
					<Station weight="20" type="&stContainerHabitat;"/>
					<Station weight="20" type="&stCommonwealthSlums;"/>
					<Station weight="15" type="&stFuelDepot;"/>
					<Station weight="15" type="&stIceFarm;"/>
					<Station weight="10" type="&stArmorDealer;"/>
					<Station weight="10" type="&stArmsDealer;"/>
					<Station weight="10" type="&stSistersOfDomina;"/>
					<Station weight="5"  type="&stHotel;"/>
					<Station weight="5"  type="&stArmsDealerRasiermesser;"/>
					<Station weight="5"  type="&stArmsDealerMakayev;"/>
				</Table>
			</FriendlyOuterStations>

			<FriendlyStations>
				<Table>
					<Station weight="20" type="&stCorporateEnclave;"/>
					<Station weight="20" type="&stCommonwealthResidentials;"/>
					<Station weight="15" type="&stFuelDepot;"/>
					<Station weight="15" type="&stHotel;"/>
					<Station weight="10" type="&stContainerHabitat;"/>
					<Station weight="10" type="&stCommonwealthSlums;"/>
					<Station weight="10" type="&stArmorDealer;"/>
					<Station weight="10" type="&stArmsDealer;"/>
					<Station weight="10" type="&stManufacturingPlant;"/>
					<Station weight="5"  type="&stTinkerGathering;"/>
					<Station weight="5"  type="&stCommonwealthDryDock;"/>
					<Station weight="5"  type="&stArmsDealerRasiermesser;"/>
					<Station weight="5"  type="&stArmsDealerMakayev;"/>
					<Station weight="5"  type="&stInsuranceCompany;"/>
					<Station weight="5"  type="&stSistersOfDomina;"/>
					<Station weight="2"  type="&stArmsDealerBushido;"/>
				</Table>
			</FriendlyStations>

			<EnemyStations>
				<Table>
					<Station weight="15" type="&stOutlawHaven;"				noReinforcements="true"/>
					<Station weight="15" type="&stCharonPirateOutpost3;"	noReinforcements="true"/>
					<Station weight="10" type="&stTerroristCamp;"			noReinforcements="true"/>
					<Station weight="10" type="&stMarauderOutpost;"			noReinforcements="true"/>
					<Station weight="5"  type="&stTerroristCompound;"		noReinforcements="true"/>
					<Station weight="5"  type="&stMarauderCompound;"		noReinforcements="true"/>
					<Station weight="5"  type="&stDrugCartelOutpost;"		noReinforcements="true"/>
					<Station weight="5"  type="&stWeaponsCache;"			noReinforcements="true"/>
					<Station weight="5"  type="&stSungSlaveCamp;"			noReinforcements="true"/>
				</Table>
			</EnemyStations>

		</Tables>

		<SystemGroup>

			<Station type="&stStarClassA0;" name="St. Katharine's Star"/>

			<AddAttribute attributes="ATypeSystem"/>
			<AddTerritory minRadius="0"		maxRadius="480"		attributes="innerSystem, metallicComp, moltenZone"/>
			<AddTerritory minRadius="480"	maxRadius="800"		attributes="lifeZone, waterComp, biosphereZone"/>
			<AddTerritory minRadius="800"	maxRadius="0"		attributes="outerSystem, waterComp, iceZone"/>

			<!-- Redglow -->

			<Orbitals distance="50" angle="random">
				<Group>
					<Primary>
						<Station type="&stVolcanicPlanetoidSizeG;" name="Redglow" showOrbit="true" />
					</Primary>

					<Orbitals distance="24" angle="equidistant">
						<Group>
							<Lookup table="StargateOutbound"/>
							
							<Siblings radiusInc="18">
								<Code>
									;	Don't create the navSign unless the stargate is there.
									;	In some adventures, for example, we don't have this gate.

									(if (sysGetObjectByName 'Outbound)
										(block (navSignObj)
											(setq navSignObj (sysCreateStation &stCommonwealthNavSign; (sysOrbitPos aOrbit)))
											(objSetData navSignObj 'Sign (typTranslate &ssStKatharine; 'navSignWarningTitle))
											(objSetData navSignObj 'Info (typTranslate &ssStKatharine; 'navSignWarningDesc))
											)
										)
								</Code>
							</Siblings>
						</Group>
						
						<Station type="&stFuelDepot;" />
						<Lookup chance="55" table="FriendlyStations" />
						<Station type="&stIocrymMonument;" />
						<Lookup chance="55" table="FriendlyStations" />
					</Orbitals>
				</Group>
			</Orbitals>

			<!-- Radiant -->

			<Orbitals distance="110" angle="random">
				<Group>
					<Primary>
						<Station type="&stDesertTerrestrialSizeH;" name="Radiant" showOrbit="true"/>
					</Primary>

					<Table>
						<Orbitals chance="34" distance="16" angle="equidistant">
							<Lookup table="FriendlyStations" />
							<Label attributes="desert, planet, planetary, terrestrial"/>
						</Orbitals>
						<Orbitals chance="33" distance="16" angle="equidistant">
							<Lookup table="FriendlyStations" />
							<Lookup table="FriendlyStations" />
							<Label attributes="desert, planet, planetary, terrestrial"/>
						</Orbitals>
						<Orbitals chance="33" distance="16" angle="equidistant">
							<Lookup table="FriendlyStations" />
							<Lookup table="FriendlyStations" />
							<Lookup table="FriendlyStations" />
						</Orbitals>
					</Table>
				</Group>
			</Orbitals>

			<!-- Incandescent -->

			<Orbitals distance="260" angle="random">
				<Group>
					<Primary>
						<Station type="&stBiosphereTerrestrialSizeI;" name="Incandescent" showOrbit="true"/>
						
						<Station type="&stStKatsArcology;"/>
					</Primary>
					
					<Orbitals count="9" distance="54" angle="equidistant">
						<Table>
							<Station chance="5"  type="&stSistersOfDomina;"/>
							<Station chance="5"  type="&stHotel;"/>
							<Station chance="15" type="&stCorporateEnclave;"/>
							<Station chance="10" type="&stFuelDepot;"/>
							<Station chance="20" type="&stCommonwealthResidentials;" noMapLabel="true"/>
							<Station chance="5"  type="&stInsuranceCompany;"/>
							<Station chance="10" type="&stArmsDealerRasiermesser;"/>
							<Station chance="5"  type="&stArmsDealerBushido;"/>
							<Station chance="5"  type="&stAutonDealer;"/>
							<Station chance="10" type="&stContainerHabitat;" noMapLabel="true"/>
							<Station chance="10" type="&stManufacturingPlant;"/>
						</Table>
					</Orbitals>
					
					<Orbitals count="12-16" distance="70" angle="equidistant">
						<Table>
							<Station chance="40" type="&stContainerHabitat;" noMapLabel="true"/>
							<Station chance="30" type="&stCommonwealthSlums;" noMapLabel="true"/>
							<Station chance="30" type="&stManufacturingPlant;"/>
						</Table>
					</Orbitals>
				</Group>
			</Orbitals>

			<!-- Majestic planetary system -->

			<Orbitals distance="420" angle="random">
				<Group>

					<!-- Majestic -->

					<Primary>
						<Station type="&stHydrogenGasGiantSizeM;" name="Majestic" showOrbit="true" />
					</Primary>

					<!-- Majestic I -->

					<Orbitals distance="22" angle="random">
						<Group>
							<Primary>
								<Station type="&stRockyPlanetoidSizeE;" name="Nearworld"/>
							</Primary>
							
							<Orbitals count="1d3-1" distance="10" angle="equidistant">
								<Lookup table="FriendlyStations" />
							</Orbitals>
						</Group>
					</Orbitals>

					<!-- Majestic II -->

					<Orbitals distance="45" angle="random">
						<Group>
							<Primary>
								<Station type="&stIcePlanetoidSizeG;" name="Farworld"/>
							</Primary>

							<Orbitals distance="16" angle="equidistant">
								<Lookup table="FriendlyOuterStations" />
								<Lookup table="FriendlyOuterStations" />
							</Orbitals>
						</Group>
					</Orbitals>

					<!-- Trojans -->

					<Lookup table="AsteroidCompactTrojans50"/>

					<Trojan>
						<Table>
							<Label  chance="20" attributes="asteroids"/>
							<Lookup chance="50" table="FriendlyOuterStations" />
							<Lookup chance="30" table="EnemyStations"/>
						</Table>
					</Trojan>

					<Lookup table="AsteroidCompactAntiTrojans50"/>

					<AntiTrojan>
						<Table>
							<Label  chance="20" attributes="asteroids"/>
							<Lookup chance="50" table="FriendlyOuterStations" />
							<Lookup chance="30" table="EnemyStations"/>
						</Table>
					</AntiTrojan>
				</Group>
			</Orbitals>

			<!-- Fulgent -->

			<Orbitals distance="10" scale="light-minute" angle="random">
				<Group>
					<Primary>
						<Station type="&stIcePlanetoidSizeG;" name="Fulgent" showOrbit="true"/>
					</Primary>

					<Orbitals distance="18" angle="equidistant">
						<Group>
							<Lookup table="StargateInbound"/>
							
							<Siblings radiusInc="18">
								<Code>
									;	Don't create the navSign unless the stargate is there.
									;	In some adventures, for example, we don't have this gate.

									(if (sysGetObjectByName 'Inbound)
										(block (navSignObj)
											(setq navSignObj (sysCreateStation &stCommonwealthNavSign; (sysOrbitPos aOrbit)))
											(objSetData navSignObj 'Sign (typTranslate &ssStKatharine; 'navSignWelcomeTitle))
											(objSetData navSignObj 'Info (typTranslate &ssStKatharine; 'navSignWelcomeDesc))
											)
										)
								</Code>
							</Siblings>
						</Group>
						
						<Lookup chance="25" table="FriendlyOuterStations" />
						<Station type="&stFuelDepot;" />
						<Lookup chance="25" table="FriendlyOuterStations" />
						<Lookup chance="25" table="FriendlyOuterStations" />
					</Orbitals>
				</Group>
			</Orbitals>

			<!-- Icy Ring -->

			<Orbitals distance="780" angle="random">
				<Lookup table="AsteroidIceBelt500"/>
			</Orbitals>
			
			<Orbitals count="2d4+4" distance="740-820" angle="minSeparation:10">
				<Lookup table="EnemyStations"/>
			</Orbitals>

			<!-- Tenebrous -->

			<Orbitals distance="17" scale="light-minute" angle="random">
				<Group>
					<Primary>
						<Station type="&stPrimordialPlanetoidSizeG;" name="Tenebrous" showOrbit="true"/>
					</Primary>
					
					<Orbitals distance="20" angle="random">
						<Label attributes="planet, planetary, planetoid, primordial"/>
					</Orbitals>
				</Group>
			</Orbitals>

			<!-- Create more stargates in case an extension added more links -->

			<Lookup table="HumanSpaceStargates"/>

		</SystemGroup>
		
		<Language>
			<Text id="navSignWelcomeTitle">Welcome!</Text>
			<Text id="navSignWelcomeDesc">Welcome to St. Katharine's Star, capital of the Commonwealth and metropolitan jewel of Human Space.</Text>
			
			<Text id="navSignWarningTitle">Travel\nWarning!</Text>
			<Text id="navSignWarningDesc">

				WARNING! Systems beyond St. Katharine's Star are not controlled 
				by the Commonwealth. By entering this stargate you agree to hold 
				the Commonwealth Transport System immune to liability in the 
				event of injury, involuntary servitude, or death.

			</Text>
		</Language>
	</SystemType>

<!-- GLOBALS -->

	<Globals>
		(block Nil
			(setq stkDistanceToStK (lambda (nodeID nodesChecked)
				(switch
					(eq nodeID 'SK)
						0
						
					(block (bestDist)
						; Add this node to the list of nodes that we've checked
						(setq nodesChecked (append nodesChecked (list nodeID)))
						
						; For all the stargates, return the closest distance
						(setq bestDist 1000)
						(enum (sysGetStargates nodeID) theGate
							(block (theDestNode theDist)
								(setq theDestNode (sysGetStargateDestinationNode nodeID theGate))
								(if (not (find nodesChecked theDestNode))
									(block Nil
										(setq theDist (stkDistanceToStK theDestNode nodesChecked))
										(if (ls theDist bestDist)
											(setq bestDist theDist)
											)
										)
									)
								)
							)
							
						; Done
						(add bestDist 1)
						)
					)
				))
				
			(setq stkFreshFoodStatus (lambda (theItem)
				(switch
					(eq (itmGetData theItem "status") 'rotted)
						"rotted"
						
					(eq (itmGetData theItem "status") 'ripe)
						"ripe"

					"fresh"
					)
				))
				
			(setq stkFreshFoodPrice (lambda (theItem)
				(switch
					; If rotted, then food is worthless
					(eq (itmGetData theItem "status") 'rotted)
						0
						
					; If we're in the St Kat's system, then normal value
					(eq (sysGetNode) 'SK)
						(itmGetPrice theItem)

					; Price increases the further away from StK's
					(add (itmGetPrice theItem) (multiply (itmGetStaticData theItem "priceIncrease") (min 10 (stkDistanceToStK (sysGetNode)))))
					)
				))
				
			(setq stkFreshFoodUpdate (lambda (theSource theItem)
				(block ((status (itmGetData theItem "status"))
						(expireTime (itmGetData theItem "expireTime")))
						
					(switch
						; If the food has rotted, mark it
						(and (not (eq status 'rotted)) (gr (unvGetTick) expireTime))
							(block Nil
								(objSetItemData theSource theItem "status" 'rotted (itmGetCount theItem))
								(if (eq theSource gPlayerShip)
									(plyMessage gPlayer "The " (itmGetName theItem 0x80) " in your cargo hold have rotted")
									)
								)

						; If the food has turned ripe, mark it
						(and (not status) (gr (add (unvGetTick) 1800) expireTime))
							(block Nil
								(objSetItemData theSource theItem "status" 'ripe (itmGetCount theItem))
								(if (eq theSource gPlayerShip)
									(plyMessage gPlayer "The " (itmGetName theItem 0x80) " in your cargo hold look ripe")
									)
								)
						)
					)
				))
			)
	</Globals>
	
<!-- BEHAVIORS -->

	<ShipClass UNID="&evStKatsTrafficBehavior;"
			class=				"(St Katharine's traffic behavior)"
			virtual=			"true"
			
			attributes=			"behaviorClass"
			>

		<Events>
			<OrderDockAtStKats>
				(block Nil
					(shpOrder gSource 'dock aDockObj)
					(shpOrder gSource 'waitForThreat (random 10 200))
					(objSetData gSource "0010201F_status" 'dockedAtNewVictoria)
					)
			</OrderDockAtStKats>
			
			<OrderEnterSystem>
				(objSetData gSource "0010201F_status" 'enteredSystem)
			</OrderEnterSystem>
			
			<OnOrdersCompleted>
				(block (status dockedAt allLoot)
					; Different order depending on our current state
					(setq status (objGetData gSource "0010201F_status"))
					(setq dockedAt (shpGetDockObj gSource))
					
					; If we're docked at an object, dump any loot that we found
					(if (and dockedAt
							(objHasAttribute dockedAt "populated")
							
							; Compose a list of all loot on board that the station
							; might want to buy from us.
							
							(setq allLoot (filter (objGetItems gSource "*~mf U") theItem
								(objGetBuyPrice dockedAt theItem)
								))
							)
						(block Nil
							(enum allLoot theItem (objRemoveItem gSource theItem))
							(enum allLoot theItem (objAddItem dockedAt theItem))
							)
						)
					
					; Figure out what to do next
					(switch
						(eq status 'enteredSystem)
							(block Nil
								(setq theTarget (random (sysFindObject gSource "T +arcology")))
								(shpOrder gSource 'orbit (sysFindObject Nil "TNV +stKatsArcology;") 35 (random 20 40))
								(shpOrder gSource 'dock theTarget)
								(shpOrder gSource 'waitForThreat (random 10 60))
								(objSetData gSource "0010201F_status" 'dockedAtNewVictoria)
								)
								
						(eq status 'dockedAtNewVictoria)
							(block (roll allWrecks)
								; When leaving new victoria, orbit around for a bit
								(shpOrder gSource 'orbit (sysFindObject Nil "TNV +stKatsArcology;") 35 (random 20 40))
								
								; Randomly choose a path
								(setq roll (random 1 100))
								(switch
									; Gate out
									(leq roll 30)
										(block Nil
											(shpOrder gSource 'gate)
											(objSetData gSource "0010201F_status" 'leavingSystem)
											)
											
									; If there are wrecks in the area, loot them
									(and (leq (objGetDestiny gSource) 180)
											(not (objHasAttribute gSource "freighter"))
											(leq (random 1 100) 50)
											
											; Compose a list of all wrecks in the area
											
											(setq allWrecks (rpgFindWrecksToSalvage gSource '0010201F_marked))
											)
										(block (destObj)
											(setq destObj (random allWrecks))
											(shpOrder gSource 'loot destObj)
											(objSetData destObj "0010201F_marked" True)
											(objSetData gSource "0010201F_status" 'dockedAtStation)
											)
											
									; Dock at a random station in the system
									(block (theTarget)
										(setq theTarget (random (sysFindObject gSource "TAF +populated; -arcology; -occupation;")))
										(shpOrder gSource 'dock theTarget)
										(shpOrder gSource 'waitForThreat (random 10 20))
										(objSetData gSource "0010201F_status" 'dockedAtStation)
										)
									)
								)
								
						(eq status 'dockedAtStation)
							(block (roll allWrecks)
								; Randomly choose a path
								(setq roll (random 1 100))
								(switch
									; Gate out
									(leq roll 30)
										(block Nil
											(shpOrder gSource 'gate)
											(objSetData gSource "0010201F_status" 'leavingSystem)
											)
											
									; If there are wrecks in the area, loot them
									(and (leq (objGetDestiny gSource) 180)
											(not (objHasAttribute gSource "freighter"))
											(leq (random 1 100) 50)
											
											; Compose a list of all wrecks in the area
											
											(setq allWrecks (rpgFindWrecksToSalvage gSource '0010201F_marked))
											)
										(block (destObj)
											(setq destObj (random allWrecks))
											(shpOrder gSource 'loot destObj)
											(objSetData destObj "0010201F_marked" True)
											(objSetData gSource "0010201F_status" 'dockedAtStation)
											)
											
									; Dock at new victoria
									(leq roll 80)
										(block (theTarget)
											(setq theTarget (random (sysFindObject gSource "T +arcology")))
											(shpOrder gSource 'orbit (sysFindObject Nil "TNV +stKatsArcology;") 35 (random 20 40))
											(shpOrder gSource 'dock theTarget)
											(shpOrder gSource 'waitForThreat (random 10 60))
											(objSetData gSource "0010201F_status" 'dockedAtNewVictoria)
											)
											
									; Dock at a random station in the system
									(block (theTarget)
										(setq theTarget (random (sysFindObject gSource "TAF +populated; -arcology; -occupation;")))
										(shpOrder gSource 'dock theTarget)
										(shpOrder gSource 'waitForThreat (random 10 20))
										(objSetData gSource "0010201F_status" 'dockedAtStation)
										)
									)
								)
						)
						
					; If we were docked at an object that we just looted, then destroy the object
					(if (and (objGetData dockedAt "0010201F_marked")
							(ls (objGetProperty dockedAt 'mass) 2000)
							(not (objGetProperty dockedAt 'immutable))
							)
						(objDestroy dockedAt gSource)
						)
					)
			</OnOrdersCompleted>
		</Events>
	</ShipClass>
	
<!-- TABLES -->

	<ShipTable unid="&tbStKatsTraffic;">
		<Table>
			<Ship chance="2"	class="&scAntaresI;"/>
			<Ship chance="4"	class="&scAntaresII;"/>
			<Ship chance="3"	class="&scAntaresV;"/>
			<Ship chance="3"	class="&scEI7000;"/>
			<Ship chance="8"	class="&scEI500;"/>
			<Ship chance="9"	class="&scEI200;"/>
			<Ship chance="14"	class="&scEI100;"/>
			<Ship chance="5"	class="&scIAVLight;"/>
			<Ship chance="10"	class="&scIAVMedium;"/>
			<Ship chance="5"	class="&scIAVHeavy;"/>
			<Ship chance="10"	class="&scSapphireYacht;"/>
			<Ship chance="3"	class="&scScarabFreighter;"/>
			<Ship chance="14"	class="&scRoninB;"/>
			<Ship chance="10"	class="&scWolfen;"/>
		</Table>
	</ShipTable>

</TranscendenceModule>
