<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- RPG USE ITEM ON ARMOR =====================================================

	This screen allows the player to use an item on an armor segment.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

-->

	<DockScreen UNID="&dsRPGUseItemOnArmor;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>
		<Display type="armorSelector"
				dataFrom=	"player"
				list=		"aI"
				noEmptySlots="true"
				/>

		<Panes>
		</Panes>

		<Language>
			<Text id="rpg.tabLabel">Installed Armor</Text>
			<Text id="actionUse">[U]se on this Armor Segment</Text>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM ON DEVICE ====================================================

	This screen allows the player to use an item on an installed device.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

-->

	<DockScreen UNID="&dsRPGUseItemOnDevice;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>

		<Display type="deviceSelector"
				dataFrom=	"player"
				list=		"dI"
				noEmptySlots="true"
				/>

		<Panes>
		</Panes>

		<Language>
			<Text id="rpg.tabLabel">Installed Devices</Text>
			<Text id="actionUse">[U]se on this Device</Text>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM ON CARGO =====================================================

	This screen allows the player to use an item on an item in the cargo bay.

	gData uses the following fields:

		useItem: The item being used. If not specifed we check gItem instead.

		criteria: If non-Nil, this is the criteria of items to show.

-->

	<DockScreen UNID="&dsRPGUseItemOnCargo;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>

		<Display type="itemPicker"
				dataFrom=	"player"
				list=		"*U"
				>
			<OnDisplayInit>
				(block (
					(useItem (scrGetData gScreen 'useItem))
					(criteria (@ gData 'criteria))
					)
					(switch
						(isfunction criteria)
							(scrSetListFilter gScreen criteria)

						criteria
							(scrSetListFilter gScreen (lambda (theItem)
								(and (itmMatches theItem criteria) (not (itmIsEqual theItem useItem)))
								))
						)

					;	Do not need to reproduce details shown in itemPicker list
					(scrSetData gScreen 'hideCurrent True)
					)
			</OnDisplayInit>
		</Display>

		<Panes>
		</Panes>

		<Language>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM BASE =========================================================

	Base class for the various Use Item on XYZ dockscreens.

	gData uses the following fields:

		useItem: The item being used. If not specifed we check gItem instead.

	The following item properties will affect behavior

		rpg.useCriteria: This will be used by the item base classes and display
				lists to filter items to show

		rpg.unknownUseCriteria: This optional criteria will be used instead of
				rpg.useCriteria if the item being used is unknown to the player.

-->

	<DockScreen UNID="&dsRPGUseItemBase;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			name=				"=(itmGetName (or (@ gData 'useItem) gItem) 'capitalize)"
			>

		<OnScreenInit>
			(block (
				(useItemSaved (or (@ gData 'useItem) gItem))
				(useItem (@ (filter (objGetItems gPlayerShip '*) theItem (itmIsEqual theItem useItemSaved)) 0))

				(cargoCriteria 
					(switch
						(itmIsKnown useItem)
							(itmGetProperty useItem 'rpg.useCriteria)

						(or (itmGetProperty useItem 'rpg.unknownUseCriteria)
							(itmGetProperty useItem 'rpg.useCriteria)
							)
						)
					)

				(hasGeneralCargo (filter (objGetItems gPlayerShip "*~admU") theItem (itmMatches theItem cargoCriteria)))
				(hasDevicesCargo (filter (objGetItems gPlayerShip "dU") theItem (itmMatches theItem cargoCriteria)))
				(hasArmorCargo (filter (objGetItems gPlayerShip "aU") theItem (itmMatches theItem cargoCriteria)))
				(hasAmmoCargo (filter (objGetItems gPlayerShip "m") theItem (itmMatches theItem cargoCriteria)))
				)
				(scrSetData gScreen 'useItem useItemSaved)

				;	If we have a cargo criteria (meaning we can use the item on a 
				;	cargo item, then we need a tab set.

				(if (and cargoCriteria (not (@ gData 'subTab)))
					(scrSetTabSet gScreen (list
						{
							id: 'configuration
							label: (typTranslate gType 'rpg.tabLabel)
							screen: gType
							data: gData
							}

						(if hasGeneralCargo
							{
								id: 'generalCargo
								label: (typTranslate gType 'labelGeneralCargo)
								screen: &dsRPGUseItemOnCargo;
								data: {
									useItem: useItem
									criteria: 
										(lambda (theItem)
											(and (itmMatches theItem "*~admU") 
												(not (itmIsEqual theItem useItem))
												(itmMatches theItem cargoCriteria)
												)
											)
									subTab: True
									}
								}
							)

						(switch
							(and hasDevicesCargo hasArmorCargo)
								{
									id: 'armorAndDevicesCargo
									label: (typTranslate gType 'labelArmorAndDevicesCargo)
									screen: &dsRPGUseItemOnCargo;
									data: {
										useItem: useItem
										criteria: 
											(lambda (theItem)
												(and (itmMatches theItem "adU") 
													(not (itmIsEqual theItem useItem))
													(itmMatches theItem cargoCriteria)
													)
												)
										subTab: True
										}
									}

							(and hasArmorCargo)
								{
									id: 'armorCargo
									label: (typTranslate gType 'labelArmorCargo)
									screen: &dsRPGUseItemOnCargo;
									data: {
										useItem: useItem
										criteria: 
											(lambda (theItem)
												(and (itmMatches theItem "aU") 
													(not (itmIsEqual theItem useItem))
													(itmMatches theItem cargoCriteria)
													)
												)
										subTab: True
										}
									}

							(and hasDevicesCargo)
								{
									id: 'devicesCargo
									label: (typTranslate gType 'labelDevicesCargo)
									screen: &dsRPGUseItemOnCargo;
									data: {
										useItem: useItem
										criteria: 
											(lambda (theItem)
												(and (itmMatches theItem "dU") 
													(not (itmIsEqual theItem useItem))
													(itmMatches theItem cargoCriteria)
													)
												)
										subTab: True
										}
									}
							)

						(if hasAmmoCargo
							{
								id: 'devicesCargo
								label: (typTranslate gType 'labelAmmoCargo)
								screen: &dsRPGUseItemOnCargo;
								data: {
									useItem: useItem
									criteria: 
										(lambda (theItem)
											(and (itmMatches theItem "m") 
												(not (itmIsEqual theItem useItem))
												(itmMatches theItem cargoCriteria)
												)
											)
									subTab: True
									}
								}
							)
						))
					)
				)
		</OnScreenInit>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(useItem (@ (filter (objGetItems gPlayerShip '*) theItem (itmIsEqual theItem (scrGetData gScreen 'useItem))) 0))
						(theShip gPlayerShip)
						(dstItem (scrGetItem gScreen))
						(useInfo (itmFireEvent useItem 'CanUseOnItem {
								itemToUseOn: dstItem
								shipObj: theShip
								} ))

						(cargoCriteria 
							(switch
								(itmIsKnown useItem)
									(itmGetProperty useItem 'rpg.useCriteria)

								(or (itmGetProperty useItem 'rpg.unknownUseCriteria)
									(itmGetProperty useItem 'rpg.useCriteria)
									)
								)
							)

						;	Initialise the screen set if necessary
						)
						;(dbgOutput "useInfo: " useInfo)

						;	Set the description
						(scrSetControlValue gScreen 'useItem {
							title: (itmGetName useItem '(titleCapitalize countOnly))
							desc: (itmGetProperty useItem 'description)
							})

						(if (not (scrGetData gScreen 'hideCurrent))
							(scrSetControlValue gScreen 'currentItem {
								source: theShip
								item: dstItem
								})
							)

						(switch
							(not dstItem)
								(scrSetDescTranslate gScreen 'descNoItemsHere)

							(@ useInfo 'desc)
								(scrSetDesc gScreen (@ useInfo 'desc))

							(scrSetDescTranslate gScreen 'descCanNotUse {
								useItem: (itmGetName useItem 'article)
								dstItem: (itmGetName dstItem 'article)
								})
							)
						(scrEnableAction gScreen 'actionUse (@ useInfo 'canUse))
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="useItem"/>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionUse" default="1">
						(block (
							(useItem (scrGetData gScreen 'useItem))
							(theShip gPlayerShip)
							(dstItem (scrGetItem gScreen))
							(theCursor (scrGetListCursor gScreen))
							result
							)
							;	Use the item
							(setq result (itmFireEvent useItem 'OnUseOnItem {
								itemToUseOn: dstItem
								shipObj: theShip
								}))

							;	Restore the cursor position
							(scrSetListCursor gScreen theCursor)

							;	Store result and display it
							(scrSetData gScreen 'usageResult result)
							(scrShowPane gScreen 'ShowResult)
							)
					</Action>
				</Actions>
			</Default>

			<ShowResult noListNavigation="true">
				<OnPaneInit>
					(block (
						(useItem (scrGetData gScreen 'useItem))
						(dstItem (scrGetItem gScreen))
						(theShip gPlayerShip)
						(result (scrGetData gScreen 'usageResult))
						)
						(scrSetControlValue gScreen 'useItem {
							title: (itmGetName (itmSetCount useItem 1) '(titleCapitalize countOnly))
							desc: (itmGetProperty useItem 'description)
							})

						(if (not (scrGetData gScreen 'hideCurrent))
							(scrSetControlValue gScreen 'currentItem {
								source: theShip
								item: dstItem
								})
							)

						(scrSetDesc gScreen (@ result 'desc))

						(if (and (objHasItem theShip useItem 1) (not (@ result 'nextScreen)))

							;	If we've got another item to use, ask if the player wants
							;	to use it.

							(block ()
								(scrShowAction gScreen 'actionDone True)
								(scrShowAction gScreen 'actionUseAnother True)
								;(scrSetActionLabel gScreen 'actionUseAnother (scrTranslate gScreen 'actionUseAnother {
								;	itemName: (itmGetName useItem 0)
								;	}))
								)

							;	Done

							(block ()
								(scrShowAction gScreen 'actionDone True)
								(scrShowAction gScreen 'actionUseAnother Nil)
								)
							)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="useItem"/>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionUseAnother" default="1">
						(scrShowPane gScreen 'Default)
					</Action>

					<Action id="actionDone" default="1" cancel="1">
						(block (
							(result (scrGetData gScreen 'usageResult))
							)
							(switch
								(= (@ result 'nextScreen) 'forceUndock)
									(scrExitScreen gScreen 'forceUndock)

								(= (@ result 'nextScreen) 'forceExit)
									(scrExitScreen gScreen)

								(@ result 'nextScreen)
									(block Nil
										(scrExitScreen gScreen)
										(scrShowScreen gScreen (@ result 'nextScreen) (@ result 'nextScreenData))
										)

								(scrExitScreen gScreen)
								)
							)
					</Action>
				</Actions>
			</ShowResult>
		</Panes>

		<Language>
			<Text id="actionUse">[U]se on this Item</Text>
			<Text id="actionUseOnCargo">Use on [C]argo Item</Text>
			<Text id="actionUseAnother">[U]se Another</Text>

			<Text id="labelGeneralCargo">General Cargo</Text>
			<Text id="labelArmorAndDevicesCargo">Devices &amp; Armor Cargo</Text>
			<Text id="labelArmorCargo">Armor Cargo</Text>
			<Text id="labelDevicesCargo">Devices Cargo</Text>
			<Text id="labelAmmoCargo">Ammo Cargo</Text>

			<Text id="descCanNotUse">You cannot use %useItem% on %dstItem%.</Text>
		</Language>
	</DockScreen>


<!-- BASE CLASSES -->

	<!-- Armor Repair Item Base Class

	Armor repair items should inherit from this class. Typically they should
	set useScreen to dsRPGUseItemOnArmor.

	EVENTS
		CanRepairItem - override this event to limit which types of armor can be repaired

	PROPERTIES
		rpg.repairTable: Table to determine effect on various items. The table
			is a list of structs with the following fields:

			criteria: Table entry used for items that match this criteria.
			repairHP: HP repaired.
			descID: If repairHP is Nil, then this explains why repair failed.
			minLevel: Target armor most be at least this level.
			maxLevel: Target armor must not be higher than this level.

    -->

	<Type UNID="&baStdArmorRepair;">
		<Properties>
			<Constant id="rpg.useCriteria">"a"</Constant>
		</Properties>

		<Events>
			<CanRepairItem>True</CanRepairItem>

			<CanUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(shipObj (@ gData 'shipObj))
					(armorNoun (cat (objGetArmorName shipObj dstItem) " " (itmGetName dstItem 'noModifiers)))
					(skillLevel (typGetData &baStdArmorRepair; 'skillLevel))
					(useDesc (switch
						(ls skillLevel 2)	'descUsageOK1
						(ls skillLevel 5)	'descUsageOK2
						(ls skillLevel 10)	'descUsageOK3
											'descUsageOK4
						))
					(repairDesc 
						(or (rpgFindItemInTable dstItem (itmGetProperty gItem 'rpg.repairTable))
							{
								repairHP: (eval (itmGetStaticData gItem 'repairHP))
								minLevel: (max 1 (- (itmGetLevel gItem) 3))
								maxLevel: (+ (itmGetLevel gItem) 4)
								}
							)
						)
					(armorLevel (itmGetProperty dstItem 'repairLevel))
					(armorHP (objGetItemProperty shipObj dstItem 'hp))
					(maxArmorHP (objGetItemProperty shipObj dstItem 'maxHP))
					)
					;(dbgOutput repairDesc)
					(switch
						;	Armor repair items only work on armor
						(not (itmMatches dstItem "a"))
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descUsageNotArmor {
									useItem: (itmGetName gItem 'plural)
									dstItem: (itmGetName dstItem 'article)
									})
								}

						;	Item is unidentified (assume it is a barrel for now)
						(not (itmIsKnown gItem))
							{
								canUse: True
								desc: (itmTranslate gItem 'descUsageUnknown {
									useItem: (itmGetName gItem)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}

						;	Armor segment is not damaged
						(= armorHP maxArmorHP)
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descUsageArmorNotDamaged {
									useItem: (itmGetName gItem)
									dstItem: (itmGetName dstItem)
									armorNoun: armorNoun
									})
								}

						;	Check if we can repair armor with the given item
						(not (and (setq aItemToRepair dstItem)
								(objFireItemEvent shipObj gItem 'CanRepairItem { itemToRepair:dstItem })
								))
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descUsageCanNotRepair {
									useItem: (itmGetName gItem 'article)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}

						;	If we can't repair this item
						(not (@ repairDesc 'repairHP))
							{
								canUse: Nil
								desc: (itmTranslate gItem (@ repairDesc 'descID) {
									useItem: (itmGetName gItem 'article)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}

						;	We cannot repair armor that is too low level
						(and (@ repairDesc 'minLevel) (ls armorLevel (@ repairDesc 'minLevel)))
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descArmorTooPrimitive {
									useItem: (itmGetName gItem 'article)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}

						;	We cannot repair armor that is too high level
						(and (@ repairDesc 'maxLevel) (gr armorLevel (@ repairDesc 'maxLevel)))
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descArmorTooAdvanced {
									useItem: (itmGetName gItem 'article)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}

						;	Otherwise OK
						{
							canUse: True
							desc: (itmTranslate gItem useDesc {
								useItem: (itmGetName gItem 'article)
								dstItem: (itmGetName dstItem '(demonstrative noModifiers))
								})
							}
						)
					)
			</CanUseOnItem>

			<OnUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(shipObj (@ gData 'shipObj))
					(repairDesc 
						(or (rpgFindItemInTable dstItem (itmGetProperty gItem 'rpg.repairTable))
							{
								repairHP: (eval (itmGetStaticData gItem 'repairHP))
								minLevel: (max 1 (- (itmGetLevel gItem) 3))
								maxLevel: (+ (itmGetLevel gItem) 4)
								}
							)
						)
					(descIntro (itmTranslate gItem 'descResultIntro))
					(armorLevel (itmGetProperty dstItem 'repairLevel))
					(armorHP (objGetItemProperty shipObj dstItem 'hp))
					(maxArmorHP (objGetItemProperty shipObj dstItem 'maxHP))

					(consumeItem True)

					resultDesc hpRepaired
					)

					;(dbgOutput repairDesc)

					(switch
						(not (itmMatches dstItem "a"))
							(setq resultDesc 'descResultNotArmor)

						;	NOTE: We need to check some of these conditions again because if this
						;	was an unknown item, we don't know that it won't work until we try it.
						;
						;	Also, if we get this far, then we consume the item, because we didn't
						;	know what it was so we used up the whole thing.

						(= armorHP maxArmorHP)
							(setq resultDesc 'descResultNotDamaged)

						(not (objFireItemEvent shipObj gItem 'CanRepairItem { itemToRepair:dstItem }))
							(setq resultDesc 'descResultCannotRepair)

						;	If we can't repair this item
						(not (@ repairDesc 'repairHP))
							(setq resultDesc (or (@ repairDesc 'descID) 'descResultCannotRepair))

						;	We cannot repair armor that is too low level
						(and (@ repairDesc 'minLevel) (ls armorLevel (@ repairDesc 'minLevel)))
							(setq resultDesc 'descResultArmorTooPrimitive)

						;	We cannot repair armor that is too high level
						(and (@ repairDesc 'maxLevel) (gr armorLevel (@ repairDesc 'maxLevel)))
							(setq resultDesc 'descResultArmorTooAdvanced)

						(block (
							(repair (@ repairDesc 'repairHP))
							(armorSeg (itmGetArmorInstalledLocation dstItem))
							(skillLevel (typGetData &baStdArmorRepair; 'skillLevel))

							;	As skill level increased, the player's failure chance
							;	decreases. Also the amount of hp repaired increased.
							(failureChance (switch
								(ls skillLevel 2)	20
								(ls skillLevel 5)	10
								(ls skillLevel 10)	5
													0
								))
							(repairScale (switch
								(ls skillLevel 2)	80
								(ls skillLevel 5)	100
								(ls skillLevel 10)	110
									(min (+ 70 (* skillLevel 5)) 200)
								))
							(usedUp 100)
							)
							;	If the repairing item is damaged armor, then we don't repair as much
							(if (itmMatches theItem "aD")
								(setq repair (/ repair 2))
								)

							;	Scale repair HP with skill level
							(setq repair (/ (* repair repairScale) 100))

							;	Do the repairs
							(switch
								(leq (random 1 100) failureChance)
									(if (= (random 1 2) 1)
										;	Sometimes we fail and damage the armor
										(block (
											(damageCaused (/ (* repair (random 20 100)) 100))
											)
											(setq dstItem (objSetItemProperty shipObj dstItem 'incHP (- damageCaused)))
											(if (and (not (itmGetProperty dstItem 'installed))
													(= (itmGetProperty dstItem 'hp) 0)
													)
												(block ()
													(objRemoveItem shipObj dstItem)
													(setq resultDesc 'descResultDestroyed)
													)
												(setq resultDesc 'descResultDamagedMore)
												)
											)

										;	Sometimes we fail without damaging further
										(setq resultDesc 'descResultFailed)
										)

								(block ()
									(setq hpRepaired (min (- maxArmorHP armorHP) repair))
									(objSetItemProperty shipObj dstItem 'incHP repair)
									(setq resultDesc 'descResultRepaired)
										
									;	How much of the kit did we use?
									(if (gr repair 0)
										(setq usedUp (/ (* 100 hpRepaired) repair))
										)

									;	Skill level increases
									(typIncData &baStdArmorRepair; 'skillLevel)
									)
								)

							;	Use up the item
							(if (or (ls skillLevel 10)
									(geq usedUp 20)
									(leq (random 1 100) (add usedUp 20))
									)
								Nil

								; Item is not used up
								(block ()
									(setq resultDesc 'descResultReusable)
									(setq consumeItem Nil)
									)
								)
							)
						)

					;	Identify the item
					(itmSetKnown gItem)

					;	Consume
					(if consumeItem
						(objRemoveItem shipObj gItem 1)
						)

					{
						desc: (cat
							descIntro (if descIntro " ")
							(itmTranslate gItem resultDesc {
								useItem: (itmGetName gItem)
								dstItem: (itmGetName dstItem '(demonstrative noModifiers))
								hpRepaired: (fmtNoun (typTranslate &baStdArmorRepair; 'nounHitPoints) hpRepaired 'countAlways)
								})
							)
						}
					)
			</OnUseOnItem>
		</Events>

		<Language>
			<Text id="descUsageArmorNotDamaged">The %dstItem% is not damaged.</Text>
			<Text id="descUsageCanNotRepair">Unfortunately, you cannot repair %dstItem% with %useItem%.</Text>
			<Text id="descUsageInstalledOnly">%UseItem% can only be used on installed armor segments.</Text>
			<Text id="descUsageNotArmor">%UseItem% are used for repairing armor and will not function on %dstItem%.</Text>
			<Text id="descUsageUnknown">The barrel seems to contain some kind of armor paste. You can use it on %dstItem%.</Text>
			<Text id="descArmorTooPrimitive">Unfortunately, %dstItem% is too primitive to be repaired with %useItem%.</Text>
			<Text id="descArmorTooAdvanced">Unfortunately, %dstItem% is too advanced to be repaired with %useItem%.</Text>

			<Text id="descUsageOK1">You can attempt to repair %dstItem% with %useItem%, though you do not have much experience repairing armor.</Text>
			<Text id="descUsageOK2">You can attempt to repair %dstItem% with %useItem%; you have some experience repairing armor.</Text>
			<Text id="descUsageOK3">You can attempt to repair %dstItem% with %useItem%; you are proficient at repairing armor.</Text>
			<Text id="descUsageOK4">You can attempt to repair %dstItem% with %useItem%; you are an expert at repairing armor.</Text>

			<Text id="descResultCanNotRepair">Unfortunately, you cannot repair %dstItem% with it.</Text>
			<Text id="descResultDamagedMore">Unfortunately, your attempt to repair the armor has only damaged it further.</Text>
			<Text id="descResultDestroyed">Unfortunately, your attempt to repair the armor has destroyed it.</Text>
			<Text id="descResultFailed">Unfortunately, your attempt to repair the armor was unsuccessful and the %useItem% was ruined in the process.</Text>
			<Text id="descResultItemError">ERROR: &lt;RepairHP&gt; static data not found.</Text>
			<Text id="descResultNotArmor">That is not an armor segment.</Text>
			<Text id="descResultNotDamaged">But the armor does not need to be repaired.</Text>
			<Text id="descResultRepaired">You have successfully repaired %hpRepaired% of damage to your armor.</Text>
			<Text id="descResultArmorTooPrimitive">Unfortunately, %dstItem% is too primitive to be repaired with it.</Text>
			<Text id="descResultArmorTooAdvanced">Unfortunately, %dstItem% is too advanced to be repaired with it.</Text>
			<Text id="descResultReusable">
				You have successfully repaired %hpRepaired% of damage to your armor.

				There is still enough of the %useItem% left to repair other segments.
			</Text>
			
			<Text id="nounHitPoints">hit point(s)</Text>
		</Language>
	</Type>

	<!-- Paste Barrel Item Base Class

	Armor coating barrels should inherit from this class. Typically they should
	set useScreen to dsRPGUseItemOnArmor.

	STATIC DATA
		enhancement - enhancement to apply to armor
		enhancementTable - table of criteria and enhancements for different armor types / levels

    -->

	<Type UNID="&baStdPasteBarrel;">
		<Properties>
			<Constant id="rpg.useCriteria">"a"</Constant>
		</Properties>

		<Events>
			<CanUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					)
					(switch
						(not (itmMatches dstItem "a"))
							Nil

						(itmIsKnown gItem)
							{
								canUse: True
								desc: (itmTranslate gItem 'descUsageOK {
									useItem: (itmGetName gItem 'article)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}
						{
							canUse: True
							desc: (itmTranslate gItem 'descUsageUnknown {
								useItem: (itmGetName gItem)
								dstItem: (itmGetName dstItem '(demonstrative noModifiers))
								})
							}
						)
					)
			</CanUseOnItem>

			<OnUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(enhancement (itmGetStaticData gItem 'enhancement))
					(enhancementInfo (rpgFindItemInTable dstItem (or (itmGetProperty gItem 'rpg.enhancementTable) (itmGetStaticData gItem 'enhancementTable))))
					)

					;	General enhancement has higher priority than table
					(if enhancement (set@ enhancementInfo 'enhancement enhancement))

					(switch
						(not enhancementInfo)
							"ERROR: not implemented yet"

						(block (result)
							;	Apply enhancement
							(setq result (shpEnhanceItem gPlayerShip dstItem (@ enhancementInfo 'enhancement)))

							;	Remove the armor paste from the player's cargo
							(objRemoveItem gPlayerShip gItem 1)

							;	Identify the item
							(itmSetKnown gItem)

							{
								desc: (cat
									(itmTranslate gItem 'descResultIntro)
									(intArmorEnhanceStatus result)
									(if (@ enhancementInfo 'descID) " ")
									(or (itmTranslate gItem (@ enhancementInfo 'descID))
										(itmTranslate gItem (cat "descResult" (@ enhancementInfo 'descID)))
										)
									)
								}
							)
						)
					)
			</OnUseOnItem>
		</Events>

		<Language>
			<Text id="descUsageOK">You can use %useItem% on %dstItem%.</Text>
			<Text id="descUsageUnknown">The barrel seems to contain some kind of armor paste. You can use it on %dstItem%.</Text>

			<Text id="descResultTooAdvanced">Unfortunately, your armor is too strong for the nanomachines.</Text>
			<Text id="descResultTooPrimitive">Unfortunately, your armor is too primitive for the nanomachines.</Text>
		</Language>
	</Type>

	<!-- Device Enhancment Item Base Class

	Items to enhance devices should inherit from this class. Typically they should
	set useScreen to dsRPGUseItemOnDevice.

	STATIC DATA
		enhancement - enhancement to apply
		enhancementTable - table of criteria and enhancements for different device types / levels

    -->

	<Type UNID="&baStdDeviceEnhancement;">
		<Properties>
			<Constant id="rpg.useCriteria">"d"</Constant>
		</Properties>

		<Events>
			<CanUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(useCriteria (itmGetProperty gItem 'rpg.useCriteria))
					(enhancementInfo (rpgFindItemInTable dstItem (or (itmGetProperty gItem 'rpg.enhancementTable) (itmGetStaticData gItem 'enhancementTable))))
					)
					(switch
						(not (itmMatches dstItem useCriteria))
							Nil

						(not (itmIsKnown gItem))
							{
								canUse: True
								desc: (itmTranslate gItem 'descUsageUnknown {
									useItem: (itmGetName gItem)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}

						(not (@ enhancementInfo 'enhancement))
							{
								canUse: Nil
								desc: 
									(or (itmTranslate gItem (@ enhancementInfo 'descID))
										(itmTranslate gItem (cat "descResult" (@ enhancementInfo 'descID)))
										)
								}

						{
							canUse: True
							desc: (itmTranslate gItem 'descUsageOK {
								useItem: (itmGetName gItem 'article)
								dstItem: (itmGetName dstItem '(demonstrative noModifiers))
								})
							}
						)
					)
			</CanUseOnItem>

			<OnUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(enhancement (itmGetStaticData gItem 'enhancement))
					(enhancementInfo (rpgFindItemInTable dstItem (or (itmGetProperty gItem 'rpg.enhancementTable) (itmGetStaticData gItem 'enhancementTable))))
					)

					;	General enhancement has higher priority than table
					(if enhancement (set@ enhancementInfo 'enhancement enhancement))

					(switch
						(not enhancementInfo)
							(block Nil
								;	No effect, so can't identify item
								(objRemoveItem gPlayerShip gItem 1)
								{
									desc: (itmTranslate gItem 'descNoEffect)
									}
								)

						(block (
							(trData {
								dstItem: (itmGetName dstItem 'noModifiers)
								})
							(descIntro (itmTranslate gItem 'descResultIntro trData))
							result
							)
							(switch
								;	Special case for repair as shpEnhanceItem does not return 4 (repair)
								(@ enhancementInfo 'repair)
									(block Nil
										(shpRepairItem gPlayerShip dstItem)
										(setq result 4)
										)

								(not (@ enhancementInfo 'enhancement))
									(setq result 1)

								;	Apply enhancement
								(setq result (shpEnhanceItem gPlayerShip dstItem (@ enhancementInfo 'enhancement)))
								)

							;	Remove the item from the player's cargo
							(objRemoveItem gPlayerShip gItem 1)

							;	Identify the item
							(itmSetKnown gItem)

							{
								desc: (cat
									descIntro (if descIntro " ")
									(switch
										(= result 0) (itmTranslate gItem 'descSuccess trData)
										(= result 1) (itmTranslate gItem 'descNoEffect trData)
										(= result 2) (itmTranslate gItem 'descNoFurther trData)
										(= result 3) (itmTranslate gItem 'descWeakened trData)
										(= result 4) (itmTranslate gItem 'descRepaired trData)
										(= result 5) (itmTranslate gItem 'descRemoved trData)
										(= result 6) (itmTranslate gItem 'descReplaced trData)
										(= result 7) (itmTranslate gItem 'descFurther trData)
										)
									(if (@ enhancementInfo 'descID) " ")
									(or (itmTranslate gItem (@ enhancementInfo 'descID))
										(itmTranslate gItem (cat "descResult" (@ enhancementInfo 'descID)))
										)
									)
								}
							)
						)
					)
			</OnUseOnItem>
		</Events>

		<Language>
			<Text id="descSuccess">Your %dstItem% is more powerful.</Text>
			<Text id="descNoEffect">The enhancement has no effect.</Text>
			<Text id="descNoFurther">Your %dstItem% is already enhanced.</Text>
			<Text id="descWeakened">Your %dstItem% has weakened further.</Text>
			<Text id="descRepaired">Your %dstItem% has been repaired.</Text>
			<Text id="descRemoved">Your %dstItem% has lost its enhancement.</Text>
			<Text id="descReplaced">Your %dstItem% is more powerful (previous enhancement lost).</Text>
			<Text id="descFurther">Your %dstItem% has been further enhanced.</Text>

			<Text id="descUsageOK">You can use %useItem% on %dstItem%.</Text>
			<Text id="descUsageUnknown">This appears to be some kind of device upgrade. You can use it on %dstItem%.</Text>

			<Text id="descResultTooAdvanced">Unfortunately, your device is too advanced to be upgraded.</Text>
			<Text id="descResultTooPrimitive">Unfortunately, your device is too primitive for the upgrade.</Text>
		</Language>
	</Type>

<!-- CODE -->

	<Globals>
		(block Nil
			;	Just a wrapper to save some typing
			(setq itmTranslate (lambda (theItem textID data default)
				(typTranslate (itmGetType theItem) textID data default)
				))
			)
	</Globals>

</TranscendenceModule>
