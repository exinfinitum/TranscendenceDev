<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- QUANTUM CPU -->

	<!-- Level 5: Quantum CPU -->

	<ItemType UNID="&itMnemonicProcessor;"
			name=				"Heisenmachines quantum CPU"
			attributes=			"commonwealth, heisenmachines, majorItem, quantumCPU"
			  
			level=				"5"
			frequency=			"uncommon"

			value=				"7500"
			mass=				"1000"
			  
			description=		"The Heisenmachines Corporation was the first commercial producer of quantum CPUs. Quantum CPUs are necessary for processing the instructions in a mnemonic memory cube."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="192" imageWidth="96" imageHeight="96"/>

		<MiscellaneousDevice
				powerUse=		"20"
				/>
	</ItemType>

<!-- PROGRAMS -->

	<!-- Level 5: Defective Shield Optimizer Cube -->

	<ItemType UNID="&itDefectiveShieldOptimizer;"
			name=				"ShieldPower v1.0 algorithm cube"
			level=				"5"
			value=				"5"
			mass=				"50"
			frequency=			"rare"
			unknownType=		"&itUnknownMnemonicCube;"
			attributes=			"defective, info, minorItem, quantumProgram, shieldDamage"

			description=		"The first version of the ShieldPower algorithm is promising but contains significant bugs."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(block (
				(shieldItem (@ (objGetItems gSource "sI") 0))
				(consumeItem True)
				)
				(switch
					;	No Quantum CPU

					(not (progHasQuantumCPU gSource))
						(block ()
							(objSendMessage gSource Nil (typTranslate gType 'msgQuantumCPURequired))
							(setq consumeItem Nil)
							)

					;	No shield generator

					(not shieldItem)
						(objSendMessage gSource Nil (typTranslate gType 'msgNoShields))
						
					;	Non-energy shields cannot be enhanced

					(itmMatches shieldItem "s +nonEnergyShields")
						(objSendMessage gSource Nil 
							(typTranslate gType 'msgCannotEnhance { 
								itemName:(itmGetName shieldItem '(article short))
								})
							)

					;	If the shield generator is not advanced enough, then nothing happens

					(ls (itmGetLevel shieldItem) 4)
						(objSendMessage gSource Nil (typTranslate gType 'msgTooPrimitive))

					;	If the shield generator is too advanced, then nothing happens

					(gr (itmGetLevel shieldItem) 9)
						(objSendMessage gSource Nil (typTranslate gType 'msgTooAdvanced))

					;	If the item is damaged, we cannot do anything

					(itmIsDamaged shieldItem)
						(objSendMessage gSource Nil (typTranslate gType 'msgTooDamaged))

					;	10% chance of enhancing the shield generator

					(leq (random 1 100) 10)
						(block (result)
							(setq result (shpEnhanceItem gSource shieldItem {
								enhancement: "+hpBonus:20"
								type: gType
								}))

							(objSendMessage gSource Nil 
								(intItemEnhanceStatus result
									(typTranslate gType 'msgSuccess)
									(typTranslate gType 'nounShieldGenerator)
									)
								)
							)

					;	Otherwise, a bug

					(block (result)
						(setq result (shpEnhanceItem gSource shieldItem {
							enhancement: "-hpBonus:20"
							type: gType
							}))

						(objSendMessage gSource Nil 
							(intItemEnhanceStatus result
								(typTranslate gType 'msgShieldError)
								(typTranslate gType 'nounShieldGenerator)
								)
							)
						)
					)

				;	Consume the cube

				(if consumeItem
					(block ()
						(itmSetKnown gItem)
						(objRemoveItem gSource gItem 1)
						)
					)
				)
		</Invoke>

		<Language>
			<Text id="msgQuantumCPURequired">Quantum CPU required</Text>
			<Text id="msgNoShields">Shield generator required</Text>
			<Text id="msgCannotEnhance">The algorithm cannot enhance %itemName%</Text>
			<Text id="msgTooAdvanced">Shield generator is too advanced for ShieldPower algorithm</Text>
			<Text id="msgTooDamaged">Shield generator is too damaged for optimization</Text>
			<Text id="msgTooPrimitive">Shield generator is too primitive for ShieldPower algorithm</Text>
			<Text id="msgShieldError">ShieldPower: qbit indeterminacy exception [#!800A410!]</Text>
			<Text id="msgSuccess">Your shields are more powerful</Text>
			<Text id="nounShieldGenerator">shield generator</Text>
		</Language>
	</ItemType>

	<!-- Level 5: Shield Optimizer Cube -->

	<ItemType UNID="&itShieldOptimizer;"
			name=				"ShieldPower v3.1.8 algorithm cube"
			level=				"5"
			value=				"1000"
			mass=				"50"
			frequency=			"uncommon"
			unknownType=		"&itUnknownMnemonicCube;"
			attributes=			"info, minorItem, quantumProgram, shieldEnhance"

			description=		"This algorithm enhances shield generators of technology levels 4 through 9."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(block (
				(shieldItem (@ (objGetItems gSource "sI") 0))
				(consumeItem True)
				)
				(switch
					;	No Quantum CPU

					(not (progHasQuantumCPU gSource))
						(block ()
							(objSendMessage gSource Nil (typTranslate gType 'msgQuantumCPURequired))
							(setq consumeItem Nil)
							)

					;	No shield generator

					(not shieldItem)
						(objSendMessage gSource Nil (typTranslate gType 'msgNoShields))
						
					;	Non-energy shields cannot be enhanced

					(itmMatches shieldItem "s +nonEnergyShields")
						(objSendMessage gSource Nil (typTranslate gType 'msgCannotEnhance { itemName:(itmGetName shieldItem '(article short)) }))

					;	If the shield generator is not advanced enough, then nothing happens

					(ls (itmGetLevel shieldItem) 4)
						(objSendMessage gSource Nil (typTranslate gType 'msgTooPrimitive))

					;	If the shield generator is too advanced, then nothing happens

					(gr (itmGetLevel shieldItem) 9)
						(objSendMessage gSource Nil (typTranslate gType 'msgTooAdvanced))

					;	If the item is damaged, we repair it

					(itmIsDamaged shieldItem)
						(block Nil
							(shpRepairItem gSource shieldItem)
							(objSendMessage gSource Nil (typTranslate gType 'msgShieldsRepaired))
							)

					;	Shields enhanced

					(block (result)
						(setq result (shpEnhanceItem gSource shieldItem {
							enhancement: "+hpBonus:20"
							type: gType
							}))

						(objSendMessage gSource Nil 
							(intItemEnhanceStatus result 
								(typTranslate gType 'msgSuccess)
								(typTranslate gType 'nounShieldGenerator)
								)
							)
						)
					)

				;	Consume the cube

				(if consumeItem
					(block ()
						(itmSetKnown gItem)
						(objRemoveItem gSource gItem 1)
						)
					)
				)
		</Invoke>

		<Language>
			<Text id="msgQuantumCPURequired">Quantum CPU required</Text>
			<Text id="msgNoShields">Shield generator required</Text>
			<Text id="msgCannotEnhance">The algorithm cannot enhance %itemName%</Text>
			<Text id="msgTooAdvanced">Shield generator is too advanced for ShieldPower algorithm</Text>
			<Text id="msgShieldsRepaired">Shield generator has been repaired</Text>
			<Text id="msgTooPrimitive">Shield generator is too primitive for ShieldPower algorithm</Text>
			<Text id="msgShieldError">ShieldPower: qbit indeterminacy exception [#!800A410!]</Text>
			<Text id="msgSuccess">Your shields are more powerful</Text>
			<Text id="nounShieldGenerator">shield generator</Text>
		</Language>
	</ItemType>

	<!-- Level 6: Scramble Algorithm -->

	<ItemType UNID="&itScrambleAlgorithm;"
			name=				"Scramble1.5 algorithm cube"
			level=				"6"
			value=				"1000"
			mass=				"50"
			frequency=			"uncommon"
			unknownType=		"&itUnknownMnemonicCube;"
			attributes=			"consumable, info, quantumProgram"

			description=		"This algorithm hacks into near-by enemy ship computers and temporarily disable their control systems. Scramble1.5 requires a quantum CPU to execute."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<Invoke key="S">
			(switch
				; If we don't have a quantum CPU
				(not (progHasQuantumCPU gSource))
					(objSendMessage gSource Nil "Quantum CPU required")

				; Otherwise, we paralyze enemy ships in the area
				(block (targets)
					(setq targets (sysFindObject gSource "sEN:16;"))
					(enum targets target
						(objProgramDamage target gSource "Scramble1.5" 6
							(objMakeParalyzed target (random 600 1200))
							)
						)
					(if targets
						(objSendMessage gSource Nil "Scramble1.5: Targets disabled")
						(objSendMessage gSource Nil "Scramble1.5: No targets in range")
						)

					(itmSetKnown gItem)
					(objRemoveItem gSource gItem 1)
					)
				)
		</Invoke>
	</ItemType>

	<!-- Level 6: Shield Power Saver Cube -->

	<ItemType UNID="&itShieldPowerSaver;"
			name=				"ShieldEfficiency v1.2.5 algorithm cube"
			level=				"6"
			value=				"1500"
			mass=				"50"
			frequency=			"uncommon"
			unknownType=		"&itUnknownMnemonicCube;"
			attributes=			"info, minorItem, quantumProgram, shieldEnhance"

			description=		"This algorithm increases the efficiency of shield generators of technology levels 4 through 9."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(block (
				(shieldItem (@ (objGetItems gSource "sI") 0))
				(consumeItem True)
				)
				(switch
					;	No Quantum CPU

					(not (progHasQuantumCPU gSource))
						(block ()
							(objSendMessage gSource Nil (typTranslate gType 'msgQuantumCPURequired))
							(setq consumeItem Nil)
							)

					;	No shield generator

					(not shieldItem)
						(objSendMessage gSource Nil (typTranslate gType 'msgNoShields))
						
					;	Non-energy shields cannot be enhanced

					(itmMatches shieldItem "s +nonEnergyShields")
						(objSendMessage gSource Nil (typTranslate gType 'msgCannotEnhance { itemName:(itmGetName shieldItem '(article short)) }))

					;	If the shield generator is not advanced enough, then nothing happens

					(ls (itmGetLevel shieldItem) 4)
						(objSendMessage gSource Nil (typTranslate gType 'msgTooPrimitive))

					;	If the shield generator is too advanced, then nothing happens

					(gr (itmGetLevel shieldItem) 9)
						(objSendMessage gSource Nil (typTranslate gType 'msgTooAdvanced))

					;	If the item is damaged, we repair it

					(itmIsDamaged shieldItem)
						(block Nil
							(shpRepairItem gSource shieldItem)
							(objSendMessage gSource Nil (typTranslate gType 'msgShieldsRepaired))
							)

					;	Shields enhanced

					(block (result)
						(setq result (shpEnhanceItem gSource shieldItem {
							enhancement: "+efficient:20"
							type: gType
							}))
						
						(objSendMessage gSource Nil 
							(intItemEnhanceStatus result 
								(typTranslate gType 'msgSuccess)
								(typTranslate gType 'nounShieldGenerator)
								)
							)
						)
					)

				;	Consume the cube

				(if consumeItem
					(block ()
						(itmSetKnown gItem)
						(objRemoveItem gSource gItem 1)
						)
					)
				)
		</Invoke>

		<Language>
			<Text id="msgQuantumCPURequired">Quantum CPU required</Text>
			<Text id="msgNoShields">Shield generator required</Text>
			<Text id="msgCannotEnhance">The algorithm cannot enhance %itemName%</Text>
			<Text id="msgTooAdvanced">Shield generator is too advanced for ShieldPower algorithm</Text>
			<Text id="msgShieldsRepaired">Shield generator has been repaired</Text>
			<Text id="msgTooPrimitive">Shield generator is too primitive for ShieldPower algorithm</Text>
			<Text id="msgShieldError">ShieldPower: qbit indeterminacy exception [#!800A410!]</Text>
			<Text id="msgSuccess">Your shields are more efficient</Text>
			<Text id="nounShieldGenerator">shield generator</Text>
		</Language>
	</ItemType>

<!-- GLOBALS -->

	<Globals>
		(block ()
			(setq progHasQuantumCPU (lambda (sourceObj)
				(switch
					;	An installed, enabled, undamaged device with the quantumCPU attribute
					;	or with a data variable named quantumCPU

					(filter (objGetItems sourceObj "*IN") theItem
							(and (objGetItemProperty sourceObj theItem 'enabled)
								(or (itmHasAttribute theItem 'quantumCPU)
									(itmGetData theItem 'quantumCPU)
									)
								)
							)
						True

					;	Otherwise, we don't have one.

					Nil
					)
				))
			)
	</Globals>

</TranscendenceModule>
