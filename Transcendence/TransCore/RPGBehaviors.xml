<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>
	
	<!-- Convoy Behavior
	
		USAGE NOTES
		
		This simulates the behavior of a freighter convoy escorted by
		defenders.
		
		EXTRA DATA
		
		behavior:			Ship's current behavior
								'avoidingEnemy			= We're trying to run away
								'onCourse				= Ship on straight course
	-->

	<ShipClass UNID="&evStdConvoyEncounterBehavior;"
			class=				"(convoy encounter behavior)"
			virtual=			"true"
			
			attributes=			"behaviorClass"
			>
			
		<Events>
			<GetCreatePos>
				(if aTargetObj
					(intComputeRandomEncounterPos aTargetObj)
					)
			</GetCreatePos>

			<OnBehavior>
				(block (behavior)
					(setq behavior (objGetData gSource "00003015_behavior"))
					(switch
						; If we see any enemy ships then run away
						(eq behavior 'onCourse)
							(block (theEnemy)
								(if (setq theEnemy (sysFindObject gSource "sEPAN"))
									(block (shelterObj gateObj)
										(shpCancelOrders gSource)
										
										(setq gateObj (sysFindObject gSource "GN -uncharted;"))
										(setq shelterObj (sysFindObject gSource "TJAN +populated; "))
										
										; If there's shelter nearby, go to it
										(if (and shelterObj
												(ls (objGetDistance gSource shelterObj) (objGetDistance gSource gateObj))
												)
											(block Nil
												(shpOrder gSource 'dock shelterObj)
												(shpOrder gSource 'waitForThreat (random 10 40))
												)
											)
											
										; Gate out
										(shpOrder gSource 'gate gateObj)
										
										(objSetData gSource "00003015_behavior" 'avoidingEnemy)
										)
									)
								)
						)
					)
			</OnBehavior>
			
			<OnCreateOrders>
				(block (theCourse)
					(if (not aTargetObj)
						(setq aTargeObj gPlayerShip)
						)
						
					; Move towards the player's path
					(setq theCourse (intComputeRandomEncounterCourse gSource aTargetObj))
					(shpOrder gSource 'holdCourse theCourse 300)
					
					; Register a timer so that we can look for enemies
					(sysAddObjRecurringTimerEvent 30 gSource "OnBehavior")
					(objSetData gSource "00003015_behavior" 'onCourse)
					)
			</OnCreateOrders>
			
			<OnOrdersCompleted>
				(block (behavior)
					(setq behavior (objGetData gSource "00003015_behavior"))
					(switch
						; If we're done with this order, then we never encountered
						; the player, so we're done, head for a stargate
						; Note: we might encounter the player en route
						(eq behavior 'onCourse)
							(shpOrder gSource 'gate)
						)
					)
			</OnOrdersCompleted>
		</Events>
	</ShipClass>
	
	<!-- Mining Behavior
	
		USAGE NOTES
		
		This simulates the behavior of a ship with a mining weapon mining an
		ore deposit.
		
		EXTRA DATA
		
		depositID: If non-Nil, this is the deposit we should mine.
								
	-->

	<ShipClass UNID="&evStdMiningBehavior;"
			class=				"(mining behavior)"
			virtual=			"true"
			
			attributes=			"behaviorClass"
			>
			
		<Events>
			<OnOrdersCompleted>
				(block (
					depositObj
					oreObj
					asteroidObj
					)
					
					(switch
						;	Is our cargo hold full? Then we're done.
						
						(ls (objGetCargoSpaceLeft gSource) 2000)
							(shpOrder gSource 'gate)
							
						;	Are we far from our target area? If so, we need to get
						;	closer.
						
						(and (setq depositObj (objGetObjByID (objGetData gSource 'depositID)))
								(gr (objGetDistance gSource depositObj) 50)
								)
							(shpOrder gSource 'approach depositObj 25)
						
						;	If there is any ore in the area, then loot it.
						
						(and (setq oreObj (sysFindObject gSource "TN +minedOre;"))
								(leq (objGetDistance gSource oreObj) 100)
								(objGetItems oreObj "* +ore; | * +minable;")
								)
							(shpOrder gSource 'loot oreObj)
							
						;	Are there any asteroids nearby with discovered ore? If so,
						;	then we mine them.

						(setq asteroidObj (random
								(filter (sysFindObject gSource "tN:50 +asteroid") theObj
									;   LATER: API 30 allows passing a criteria to objGetOverlays
									(filter (objGetOverlays theObj) theOverlayID
										(typHasAttribute (objGetOverlayType theObj theOverlayID) 'oreCount)
										)
									)
								))
							(shpOrder gSource 'attack asteroidObj (random 5 10))
							
						;	Otherwise, look for any asteroid in range that we haven't
						;	already checked.
						
						(setq asteroidObj (random 
								(filter (sysFindObject gSource "tN:50 +asteroid") theObj
									(not (objGetData gSource (cat "00010050_Checked_" (objGetID theObj))))
									)
								))
							(block Nil
								(shpOrder gSource 'attack asteroidObj (random 5 10))
								(objSetData gSource (cat "00010050_Checked_" (objGetID asteroidObj)) True)
								)
							
						;	Otherwise, there's nothing to do
						
						(shpOrder gSource 'gate)
						)
					)
			</OnOrdersCompleted>
			
			<OnAttacked>
				(block (depositObj)
					(switch
						;	If no one is responsible, then nothing to do
					
						(not aOrderGiver)
							Nil
							
						;	If this is a friend, then ignore
						
						(= (objGetDisposition gSource aOrderGiver) 'friend)
							Nil
						
						;	If we're already attacking this target, then nothing to do
					
						(= (shpGetOrderTarget gSource) aOrderGiver)
							Nil
						
						;	If we're not near our target area, then nothing to do
					
						(and (setq depositObj (objGetObjByID (objGetData gSource 'depositID)))
								(gr (objGetDistance gSource depositObj) 50)
								)
							Nil
						
						;	Retaliate
					
						(block Nil
							(shpCancelOrders gSource)
							(shpOrder gSource 'attack aOrderGiver (random 10 20))
							)
						)
					)
			</OnAttacked>
		</Events>
	</ShipClass>
	
	<!-- Patrol Behavior
	
		USAGE NOTES
		
		This simulates the behavior of a ship on patrol that detects the
		player in a random encounter.
		
		EXTRA DATA
		
		behavior:			Ship's current behavior
								'attackingEnemy			= We're engaging the enemy
								'onCourse				= Ship on straight course
	-->

	<ShipClass UNID="&evStdPatrolEncounterBehavior;"
			class=				"(patrol encounter behavior)"
			virtual=			"true"
			
			attributes=			"behaviorClass"
			>
			
		<Events>
			<GetCreatePos>
				(if aTargetObj
					(intComputeRandomEncounterPos aTargetObj)
					)
			</GetCreatePos>

			<OnBehavior>
				(block (behavior)
					(setq behavior (objGetData gSource "00003014_behavior"))
					(switch
						; If we see any enemy ships then attack
						(eq behavior 'onCourse)
							(block (theEnemy)
								(if (setq theEnemy (sysFindObject gSource "sEPAN"))
									(block Nil
										(shpCancelOrders gSource)
										(shpOrder gSource 'attack theEnemy)
										(shpOrder gSource 'attackNearestEnemy)
										(objSetData gSource "00003014_encounterPos" (objGetPos gSource))
										(objSetData gSource "00003014_behavior" 'attackingEnemy)
										)
									)
								)

						; If the target has run away, then don't chase
						(eq behavior 'attackingEnemy)
							(if (and (geq (sysVectorDistance (objGetData gSource "00003014_encounterPos") (objGetPos gSource)) 300)
									(geq (objGetDistance gSource (objGetTarget gSource)) 50)
									)
								(block Nil
									(shpCancelOrders gSource)
									(shpOrder gSource 'gate)
									(objSetData gSource "00003014_behavior" 'onCourse)
									)
								)
						)
					)
			</OnBehavior>
			
			<OnCreateOrders>
				(block (theCourse)
					(if (not aTargetObj)
						(setq aTargeObj gPlayerShip)
						)
						
					; Move towards the player's path
					(setq theCourse (intComputeRandomEncounterCourse gSource aTargetObj))
					(shpOrder gSource 'holdCourse theCourse 300)
					
					; Register a timer so that we can look for enemies
					(sysAddObjRecurringTimerEvent 30 gSource "OnBehavior")
					(objSetData gSource "00003014_behavior" 'onCourse)
					)
			</OnCreateOrders>
			
			<OnOrdersCompleted>
				(block (behavior)
					(setq behavior (objGetData gSource "00003014_behavior"))
					(switch
						; If we're done with this order, then we never encountered
						; the player, so we're done, head for a stargate
						; Note: we might encounter the player en route
						(eq behavior 'onCourse)
							(shpOrder gSource 'gate)
							
						; If we're done attacking, then we're done
						(eq behavior 'attackingEnemy)
							(block Nil
								(shpOrder gSource 'gate)
								(objSetData gSource "00003014_behavior" 'onCourse)
								)
						)
					)
			</OnOrdersCompleted>
		</Events>
	</ShipClass>

	<!-- Wander Behavior
	
		USAGE NOTES

		Use this for wandering encounters, such as Xenophobe fleets. Ships will
		wander around the system avoiding enemy stations, but fighting back when
		threats come too close.
	
	-->

	<Type unid="&evStdWanderBehavior;">
		<Properties>
			<Definition id="wander.angleInc">60</Definition>

			<Data id="wander.centerID">(objGetID (sysFindObject gSource "tN +star"))</Data>
			<Data id="wander.radius">(random 200 900)</Data>

			<!-- wander.status
			
				Status can be one of the following values:

				'wandering: Ship is wandering around the system.
				'attacking: Ship is attacking a target.

			-->
			<Data id="wander.status">'wandering</Data>

			<Data id="wander.lastEnemyCheck"></Data>
			<Data id="wander.testRadius">0</Data>
			<Variant id="wander.maxCR">(obj@ gSource 'challengeRating)</Variant>
		</Properties>

		<Events>
			<OnEventHandlerInit>
				(block ()
					;	Deter any ship that gets too close

					(shpSetAISetting gSource 'reactToThreat 'deterNoManeuvers)
					(shpSetAISetting gSource 'threatRange 20)
					)
			</OnEventHandlerInit>

			<OnAttacked>
				(block (
					(status (obj@ gSource 'wander.status))

					allTargets
					filteredTargets
					)
					(switch
						;	Only if we're aggressive

						(not (shpGetAISetting gSource 'aggressor))
							Nil

						;	If we're not wandering, then ignore

						(!= status 'wandering)
							Nil

						;	If no order giver, nothing to do.

						(not aOrderGiver)
							Nil

						;	If order giver is not an enemy, then nothing

						(not (objIsEnemy gSource aOrderGiver))
							Nil

						;	Don't check too often

						(gr (+ (obj@ gSource 'wander.lastEnemyCheck) 150) (unvGetTick))
							Nil

						;	Only if we're healthy

						(gr (objGetVisibleDamage gSource) 50)
							Nil

						;	Look for an enemy station matching the sovereign of the
						;	order giver.

						(not (setq allTargets (sysFindObject aOrderGiver "TA J N:100 +populated; | sA J N:50")))
							Nil

						;	Filter down to those that are visible to us and have
						;	a reasonable challenge rating.

						(not (setq filteredTargets
								(filter allTargets theObj
									(and (leq (obj@ theObj 'challengeRating) (obj@ gSource 'wander.maxCR))
											(objCanDetectTarget gSource theObj)
											(gr (obj@ gSource 'maxSpeed) (obj@ theObj 'maxSpeed))
											)
									)
								))
							Nil

						;	Attack the given target

						(block (
							(targetObj (random filteredTargets))
							)
							(shpCancelOrders gSource)
							(shpOrder gSource 'attackOrRetreat targetObj)
							(objSet@ gSource 'wander.status 'attacking)
							)
						)
					)
			</OnAttacked>

			<OnOrdersCompleted>
				(block (
					(centerObj (objGetObjByID (obj@ gSource 'wander.centerID)))
					(radius (obj@ gSource 'wander.radius))

					;	Compute our angle relative to the center.

					(curAngle (sysVectorAngle gSource centerObj))

					;	Advance to the next point in the orbit

					(newAngle (+ curAngle (obj@ gSource 'wander.angleInc)))
					(newPoint (sysVectorPolarOffset centerObj newAngle radius))

					;	Figure out the next point on our path. We advance along the
					;	orbit and find a point away from any station.

					(radiusFunc (lambda ()
						(block (
							(radius (obj@ gSource 'wander.testRadius))
							)
							(objInc@ gSource 'wander.testRadius 20)
							radius
							)
						))
					(reset (objSet@ gSource 'wander.testRadius 0))
					(newDest (sysVectorRandom newPoint radiusFunc 100 "sTA"))
					)
					(switch
						;	If no center object then nothing to do

						(not centerObj)
							Nil

						;	Navigate to the new destination

						(block ()
							(shpOrder gSource 'gotoPos newDest)
							(objSet@ gSource 'wander.status 'wandering)
							)
						)
					)
			</OnOrdersCompleted>
		</Events>
	</Type>
	
	<!-- Zone Encounter Behavior
	
		USAGE NOTES
		
		This is for random encounters in which the player runs into
		a patrol that is orbiting a station. The patrol will ignore enemies
		unless the enemies are within 300 light-seconds of the station.
		
		Note: This only works with enemies that have their own sovereign.
		
		EXTRA DATA
		
		behavior:			Ship's current behavior
								'onCourse				= Ship on straight course
								'backToBase				= Heading back to base
								'patrolling				= Orbiting base
								'leavingSystem			= Leaving
								
		homeObj:			Ship's base (may be Nil)
		
	-->

	<ShipClass UNID="&evStdZoneEncounterBehavior;"
			class=				"(zone encounter behavior)"
			virtual=			"true"
			
			attributes=			"behaviorClass"
			>
			
		<Events>
			<GetCreatePos>
				(if aTargetObj
					(intComputeRandomEncounterPos aTargetObj)
					)
			</GetCreatePos>

			<OnBehavior>
				(block (behavior)
					(setq behavior (objGetData gSource "00003016_behavior"))
					(switch
						; If we see any enemy ships and we're inside our patrol zone
						; then attack. Otherwise, change course and head back to base.

						(eq behavior 'onCourse)
							(block (theEnemy theBase baseDist)
								(if (setq theEnemy (sysFindObject gSource "sEPAN"))
									(switch

										; Attack
										(and (setq theBase (objGetObjRefData gSource "00003016_homeObj"))
												(leq (setq baseDist (objGetDistance gSource theBase)) 300)
												)
											(block Nil
												(shpCancelOrders gSource)
												(shpOrder gSource 'patrol theBase 300)
												(objSetData gSource "00003016_behavior" 'patrolling)
												)

										; Back to base
										theBase
											(block Nil
												(shpCancelOrders gSource)
												(shpOrder gSource 'holdCourse
													(sysVectorSubtract (objGetPos theBase) (objGetPos gSource))
													(subtract baseDist 300)
													)
												(objSetData gSource "00003016_behavior" 'backToBase)
												)

										; Leave the system
										(block Nil
											(shpCancelOrders gSource)
											(shpOrder gSource 'gate)
											(objSetData gSource "00003016_behavior" 'leavingSystem)
											)
										)
									)
								)
						)
					)
			</OnBehavior>
			
			<OnCreateOrders>
				(block (theCourse homeBase)
					(if (not aTargetObj)
						(setq aTargeObj gPlayerShip)
						)

					; Find our nearest base
					(setq homeBase (sysFindObject gSource "TAFJN"))
					(if (not homeBase)
						(setq homeBase aBaseObj)
						)
					(objSetObjRefData gSource "00003016_homeObj" homeBase)

					; Move towards the player's path
					(setq theCourse (intComputeRandomEncounterCourse gSource aTargetObj))
					(shpOrder gSource 'holdCourse theCourse 300)

					; Register a timer so that we can look for enemies
					(sysAddObjRecurringTimerEvent 30 gSource "OnBehavior")
					(objSetData gSource "00003016_behavior" 'onCourse)
					)
			</OnCreateOrders>
			
			<OnOrdersCompleted>
				(block (behavior)
					(setq behavior (objGetData gSource "00003016_behavior"))
					(switch
						; If we're done with this order, then we never encountered
						; the player, so we're done, head for a stargate
						; Note: we might encounter the player en route
						(eq behavior 'onCourse)
							(shpOrder gSource 'gate)
							
						; If we're done attacking, then we're done
						(eq behavior 'attackingEnemy)
							(block Nil
								(shpOrder gSource 'gate)
								(objSetData gSource "00003016_behavior" 'onCourse)
								)

						(eq behavior 'backToBase)
							(block Nil
								(shpOrder gSource 'patrol (objGetObjRefData gSource "00003016_homeObj") 300)
								(objSetData gSource "00003016_behavior" 'patrolling)
								)
						)
					)
			</OnOrdersCompleted>
		</Events>
	</ShipClass>

</TranscendenceModule>
